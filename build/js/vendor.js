!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).IMask={})}(this,function(t){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(t,e){return t(e={exports:{}},e.exports),e.exports}function u(t){return t&&t.Math==Math&&t}function i(t){try{return!!t()}catch(t){return!0}}function r(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}function f(t){if(null==t)throw TypeError("Can't call method on "+t);return t}function h(t){return _(f(t))}function a(t){return"object"==typeof t?null!==t:"function"==typeof t}function s(t,e){if(!a(t))return t;var n,u;if(e&&"function"==typeof(n=t.toString)&&!a(u=n.call(t)))return u;if("function"==typeof(n=t.valueOf)&&!a(u=n.call(t)))return u;if(!e&&"function"==typeof(n=t.toString)&&!a(u=n.call(t)))return u;throw TypeError("Can't convert object to primitive value")}function l(t,e){return A.call(t,e)}function o(t){if(!a(t))throw TypeError(String(t)+" is not an object");return t}function c(e,n){try{w(p,e,n)}catch(t){p[e]=n}return n}var p=u("object"==typeof globalThis&&globalThis)||u("object"==typeof window&&window)||u("object"==typeof self&&self)||u("object"==typeof e&&e)||Function("return this")(),d=!i(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),v={}.propertyIsEnumerable,k=Object.getOwnPropertyDescriptor,g={f:k&&!v.call({1:2},1)?function(t){var e=k(this,t);return!!e&&e.enumerable}:v},y={}.toString,m="".split,_=i(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==(e=t,y.call(e).slice(8,-1))?m.call(t,""):Object(t);var e}:Object,A={}.hasOwnProperty,b=p.document,C=a(b)&&a(b.createElement),E=!d&&!i(function(){return 7!=Object.defineProperty((t="div",C?b.createElement(t):{}),"a",{get:function(){return 7}}).a;var t}),F=Object.getOwnPropertyDescriptor,S={f:d?F:function(t,e){if(t=h(t),e=s(e,!0),E)try{return F(t,e)}catch(t){}if(l(t,e))return r(!g.f.call(t,e),t[e])}},D=Object.defineProperty,B={f:d?D:function(t,e,n){if(o(t),e=s(e,!0),o(n),E)try{return D(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},w=d?function(t,e,n){return B.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t},M="__core-js_shared__",x=p[M]||c(M,{}),P=Function.toString;"function"!=typeof x.inspectSource&&(x.inspectSource=function(t){return P.call(t)});var O,T,I,j,V,R=x.inspectSource,L=p.WeakMap,N="function"==typeof L&&/native code/.test(R(L)),U=n(function(t){(t.exports=function(t,e){return x[t]||(x[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.4.8",mode:"global",copyright:"Â©"})}),z=0,H=Math.random(),Y=U("keys"),Z={},K=p.WeakMap;if(N){var G=new K,W=G.get,q=G.has,$=G.set;O=function(t,e){return $.call(G,t,e),e},T=function(t){return W.call(G,t)||{}},I=function(t){return q.call(G,t)}}else{var X=Y[j="state"]||(Y[j]=(V=j,"Symbol("+String(void 0===V?"":V)+")_"+(++z+H).toString(36)));Z[X]=!0,O=function(t,e){return w(t,X,e),e},T=function(t){return l(t,X)?t[X]:{}},I=function(t){return l(t,X)}}function J(t){return"function"==typeof t?t:void 0}function Q(t,e){return arguments.length<2?J(lt[t])||J(p[t]):lt[t]&&lt[t][e]||p[t]&&p[t][e]}function tt(t){return isNaN(t=+t)?0:(0<t?ct:ht)(t)}function et(t){return 0<t?ft(tt(t),9007199254740991):0}function nt(l){return function(t,e,n){var u,i,r,a=h(t),s=et(a.length),o=(u=s,(i=tt(n))<0?pt(i+u,0):dt(i,u));if(l&&e!=e){for(;o<s;)if((r=a[o++])!=r)return!0}else for(;o<s;o++)if((l||o in a)&&a[o]===e)return l||o||0;return!l&&-1}}function ut(t,e){var n,u=h(t),i=0,r=[];for(n in u)!l(Z,n)&&l(u,n)&&r.push(n);for(;e.length>i;)l(u,n=e[i++])&&(~vt(r,n)||r.push(n));return r}function it(t,e){for(var n=_t(e),u=B.f,i=S.f,r=0;r<n.length;r++){var a=n[r];l(t,a)||u(t,a,i(e,a))}}function rt(t,e){var n=Ct[bt(t)];return n==Ft||n!=Et&&("function"==typeof e?i(e):!!e)}function at(t,e){var n,u,i,r,a,s=t.target,o=t.global,l=t.stat;if(n=o?p:l?p[s]||c(s,{}):(p[s]||{}).prototype)for(u in e){if(r=e[u],i=t.noTargetGet?(a=Dt(n,u))&&a.value:n[u],!St(o?u:s+(l?".":"#")+u,t.forced)&&void 0!==i){if(typeof r==typeof i)continue;it(r,i)}(t.sham||i&&i.sham)&&w(r,"sham",!0),ot(n,u,r,t)}}var st={set:O,get:T,has:I,enforce:function(t){return I(t)?T(t):O(t,{})},getterFor:function(n){return function(t){var e;if(!a(t)||(e=T(t)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return e}}},ot=n(function(t){var e=st.get,s=st.enforce,o=String(String).split("String");(t.exports=function(t,e,n,u){var i=!!u&&!!u.unsafe,r=!!u&&!!u.enumerable,a=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof e||l(n,"name")||w(n,"name",e),s(n).source=o.join("string"==typeof e?e:"")),t!==p?(i?!a&&t[e]&&(r=!0):delete t[e],r?t[e]=n:w(t,e,n)):r?t[e]=n:c(e,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&e(this).source||R(this)})}),lt=p,ht=Math.ceil,ct=Math.floor,ft=Math.min,pt=Math.max,dt=Math.min,vt={includes:nt(!0),indexOf:nt(!1)}.indexOf,kt=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],gt=kt.concat("length","prototype"),yt={f:Object.getOwnPropertyNames||function(t){return ut(t,gt)}},mt={f:Object.getOwnPropertySymbols},_t=Q("Reflect","ownKeys")||function(t){var e=yt.f(o(t)),n=mt.f;return n?e.concat(n(t)):e},At=/#|\.prototype\./,bt=rt.normalize=function(t){return String(t).replace(At,".").toLowerCase()},Ct=rt.data={},Et=rt.NATIVE="N",Ft=rt.POLYFILL="P",St=rt,Dt=S.f,Bt=Object.keys||function(t){return ut(t,kt)},wt=Object.assign,Mt=Object.defineProperty,xt=!wt||i(function(){if(d&&1!==wt({b:1},wt(Mt({},"a",{enumerable:!0,get:function(){Mt(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return 1;var t={},e={},n=Symbol(),u="abcdefghijklmnopqrst";return t[n]=7,u.split("").forEach(function(t){e[t]=t}),7!=wt({},t)[n]||Bt(wt({},e)).join("")!=u})?function(t,e){for(var n=Object(f(t)),u=arguments.length,i=1,r=mt.f,a=g.f;i<u;)for(var s,o=_(arguments[i++]),l=r?Bt(o).concat(r(o)):Bt(o),h=l.length,c=0;c<h;)s=l[c++],d&&!a.call(o,s)||(n[s]=o[s]);return n}:wt;at({target:"Object",stat:!0,forced:Object.assign!==xt},{assign:xt});function Pt(l){return function(t,e,n){var u,i,r=String(f(t)),a=r.length,s=void 0===n?" ":String(n),o=et(e);return o<=a||""==s?r:(u=o-a,(i=Ot.call(s,Tt(u/s.length))).length>u&&(i=i.slice(0,u)),l?r+i:i+r)}}var Ot="".repeat||function(t){var e=String(f(this)),n="",u=tt(t);if(u<0||u==1/0)throw RangeError("Wrong number of repetitions");for(;0<u;(u>>>=1)&&(e+=e))1&u&&(n+=e);return n},Tt=Math.ceil,It={start:Pt(!1),end:Pt(!0)},jt=Q("navigator","userAgent")||"",Vt=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(jt),Rt=It.end;at({target:"String",proto:!0,forced:Vt},{padEnd:function(t,e){return Rt(this,t,1<arguments.length?e:void 0)}});var Lt=It.start;function Nt(t){return(Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ut(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function zt(t,e){for(var n=0;n<e.length;n++){var u=e[n];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function Ht(t,e,n){return e&&zt(t.prototype,e),n&&zt(t,n),t}function Yt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Kt(t,e)}function Zt(t){return(Zt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Kt(t,e){return(Kt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Gt(t,e){if(null==t)return{};var n,u,i=function(t,e){if(null==t)return{};var n,u,i={},r=Object.keys(t);for(u=0;u<r.length;u++)n=r[u],0<=e.indexOf(n)||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(u=0;u<r.length;u++)n=r[u],0<=e.indexOf(n)||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function Wt(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function qt(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Zt(t)););return t}function $t(t,e,n){return($t="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var u=qt(t,e);if(u){var i=Object.getOwnPropertyDescriptor(u,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Xt(t,e,n,u){return(Xt="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,u){var i,r,a,s,o=qt(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(u,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(u,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(u,e,i)}else s=n,(a=e)in(r=u)?Object.defineProperty(r,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):r[a]=s;return!0})(t,e,n,u)}function Jt(t,e,n,u,i){if(!Xt(t,e,n,u||t)&&i)throw new Error("failed to set property");return n}function Qt(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var n=[],u=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(u=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);u=!0);}catch(t){i=!0,r=t}finally{try{u||null==s.return||s.return()}finally{if(i)throw r}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function te(t){return"string"==typeof t||t instanceof String}at({target:"String",proto:!0,forced:Vt},{padStart:function(t,e){return Lt(this,t,1<arguments.length?e:void 0)}}),at({target:"String",proto:!0},{repeat:Ot}),function(t){function e(){this.globalThis=this,delete t.prototype._T_}"object"!=typeof globalThis&&(this?e():(t.defineProperty(t.prototype,"_T_",{configurable:!0,get:e}),_T_))}(Object);var ee="NONE",ne="LEFT",ue="FORCE_LEFT",ie="RIGHT",re="FORCE_RIGHT";function ae(t){return t.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")}var se=function(){function i(t,e,n,u){for(Ut(this,i),this.value=t,this.cursorPos=e,this.oldValue=n,this.oldSelection=u;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return Ht(i,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?ee:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?ie:ne}}]),i}(),oe=function(){function e(t){Ut(this,e),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},t)}return Ht(e,[{key:"aggregate",value:function(t){return this.rawInserted+=t.rawInserted,this.skip=this.skip||t.skip,this.inserted+=t.inserted,this.tailShift+=t.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),e}(),le=function(){function u(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length?arguments[2]:void 0;Ut(this,u),this.value=t,this.from=e,this.stop=n}return Ht(u,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(t){this.value+=String(t)}},{key:"appendTo",value:function(t){return t.append(this.toString(),{tail:!0}).aggregate(t._appendPlaceholder())}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.value.length)return"";var e=this.value[0];return this.value=this.value.slice(1),e}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(t){Object.assign(this,t)}}]),u}();function he(t){return new he.InputMask(t,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})}var ce=function(){function e(t){Ut(this,e),this._value="",this._update(Object.assign({},e.DEFAULTS,{},t)),this.isInitialized=!0}return Ht(e,[{key:"updateOptions",value:function(t){Object.keys(t).length&&this.withValueRefresh(this._update.bind(this,t))}},{key:"_update",value:function(t){Object.assign(this,t)}},{key:"reset",value:function(){this._value=""}},{key:"resolve",value:function(t){return this.reset(),this.append(t,{input:!0},""),this.doCommit(),this.value}},{key:"nearestInputPos",value:function(t){return t}},{key:"extractInput",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return this.value.slice(n,u)}},{key:"extractTail",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return new le(this.extractInput(n,u),n)}},{key:"appendTail",value:function(t){return te(t)&&(t=new le(String(t))),t.appendTo(this)}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return(t=this.doPrepare(t,n))?(this._value+=t,new oe({inserted:t,rawInserted:t})):new oe}},{key:"_appendChar",value:function(t,e,n){var u=1<arguments.length&&void 0!==e?e:{},i=2<arguments.length?n:void 0,r=this.state,a=this._appendCharRaw(t,u);if(a.inserted){var s,o=!1!==this.doValidate(u);if(o&&null!=i){var l=this.state;this.overwrite&&(s=i.state,i.shiftBefore(this.value.length));var h=this.appendTail(i);(o=h.rawInserted===i.toString())&&h.inserted&&(this.state=l)}o||(a=new oe,this.state=r,i&&s&&(i.state=s))}return a}},{key:"_appendPlaceholder",value:function(){return new oe}},{key:"append",value:function(t,e,n){if(!te(t))throw new Error("value should be string");var u=new oe,i=te(n)?new le(String(n)):n;e.tail&&(e._beforeTailState=this.state);for(var r=0;r<t.length;++r)u.aggregate(this._appendChar(t[r],e,i));return null!=i&&(u.tailShift+=this.appendTail(i).tailShift),u}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return this._value=this.value.slice(0,n)+this.value.slice(u),new oe}},{key:"withValueRefresh",value:function(t){if(this._refreshing||!this.isInitialized)return t();this._refreshing=!0;var e=this.rawInputValue,n=this.value,u=t();return this.rawInputValue=e,this.value!==n&&0===n.indexOf(this._value)&&this.append(n.slice(this._value.length),{},""),delete this._refreshing,u}},{key:"runIsolated",value:function(t){if(this._isolated||!this.isInitialized)return t(this);this._isolated=!0;var e=this.state,n=t(this);return this.state=e,delete this._isolated,n}},{key:"doPrepare",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return this.prepare?this.prepare(t,this,n):t}},{key:"doValidate",value:function(t){return(!this.validate||this.validate(this.value,this,t))&&(!this.parent||this.parent.doValidate(t))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(t){return this.format?this.format(t,this):t}},{key:"doParse",value:function(t){return this.parse?this.parse(t,this):t}},{key:"splice",value:function(t,e,n,u){var i=t+e,r=this.extractTail(i),a=this.nearestInputPos(t,u);return new oe({tailShift:a-t}).aggregate(this.remove(a)).aggregate(this.append(n,{input:!0},r))}},{key:"state",get:function(){return{_value:this.value}},set:function(t){this._value=t._value}},{key:"value",get:function(){return this._value},set:function(t){this.resolve(t)}},{key:"unmaskedValue",get:function(){return this.value},set:function(t){this.reset(),this.append(t,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(t){this.value=this.doFormat(t)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(t){this.reset(),this.append(t,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}}]),e}();function fe(t){if(null==t)throw new Error("mask property should be defined");return t instanceof RegExp?he.MaskedRegExp:te(t)?he.MaskedPattern:t instanceof Date||t===Date?he.MaskedDate:t instanceof Number||"number"==typeof t||t===Number?he.MaskedNumber:Array.isArray(t)||t===Array?he.MaskedDynamic:he.Masked&&t.prototype instanceof he.Masked?t:t instanceof Function?he.MaskedFunction:(console.warn("Mask not found for mask",t),he.Masked)}function pe(t){if(he.Masked&&t instanceof he.Masked)return t;var e=(t=Object.assign({},t)).mask;if(he.Masked&&e instanceof he.Masked)return e;var n=fe(e);if(!n)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new n(t)}ce.DEFAULTS={format:function(t){return t},parse:function(t){return t}},he.Masked=ce,he.createMask=pe;var de={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},ve=function(){function u(t){Ut(this,u);var e=t.mask,n=Gt(t,["mask"]);this.masked=pe({mask:e}),Object.assign(this,n)}return Ht(u,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length;return 0===n&&1<=u?(this._isFilled=!1,this.masked.remove(n,u)):new oe}},{key:"_appendChar",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(this._isFilled)return new oe;var u=this.masked.state,i=this.masked._appendChar(t,n);return i.inserted&&!1===this.doValidate(n)&&(i.inserted=i.rawInserted="",this.masked.state=u),i.inserted||this.isOptional||this.lazy||n.input||(i.inserted=this.placeholderChar),i.skip=!i.inserted&&!this.isOptional,this._isFilled=Boolean(i.inserted),i}},{key:"append",value:function(){var t;return(t=this.masked).append.apply(t,arguments)}},{key:"_appendPlaceholder",value:function(){var t=new oe;return this._isFilled||this.isOptional||(this._isFilled=!0,t.inserted=this.placeholderChar),t}},{key:"extractTail",value:function(){var t;return(t=this.masked).extractTail.apply(t,arguments)}},{key:"appendTail",value:function(){var t;return(t=this.masked).appendTail.apply(t,arguments)}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length?n:void 0;return this.masked.extractInput(u,i,r)}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:ee,u=this.value.length,i=Math.min(Math.max(t,0),u);switch(n){case ne:case ue:return this.isComplete?i:0;case ie:case re:return this.isComplete?i:u;case ee:default:return i}}},{key:"doValidate",value:function(){var t,e;return(t=this.masked).doValidate.apply(t,arguments)&&(!this.parent||(e=this.parent).doValidate.apply(e,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(t){this.masked.state=t.masked,this._isFilled=t._isFilled}}]),u}(),ke=function(){function e(t){Ut(this,e),Object.assign(this,t),this._value=""}return Ht(e,[{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this._value.length;return this._value=this._value.slice(0,n)+this._value.slice(u),this._value||(this._isRawInput=!1),new oe}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:ee,u=this._value.length;switch(n){case ne:case ue:return 0;case ee:case ie:case re:default:return u}}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this._value.length;return(2<arguments.length&&void 0!==n?n:{}).raw&&this._isRawInput&&this._value.slice(u,i)||""}},{key:"_appendChar",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{},u=new oe;if(this._value)return u;var i=this.char===t[0]&&(this.isUnmasking||n.input||n.raw)&&!n.tail;return i&&(u.rawInserted=this.char),this._value=u.inserted=this.char,this._isRawInput=i&&(n.raw||n.input),u}},{key:"_appendPlaceholder",value:function(){var t=new oe;return this._value||(this._value=t.inserted=this.char),t}},{key:"extractTail",value:function(t,e){1<arguments.length&&void 0!==e||this.value.length;return new le("")}},{key:"appendTail",value:function(t){return te(t)&&(t=new le(String(t))),t.appendTo(this)}},{key:"append",value:function(t,e,n){var u=this._appendChar(t,e);return null!=n&&(u.tailShift+=this.appendTail(n).tailShift),u}},{key:"doCommit",value:function(){}},{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"isComplete",get:function(){return!0}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(t){Object.assign(this,t)}}]),e}(),ge=function(){function l(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;Ut(this,l),this.chunks=t,this.from=e}return Ht(l,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(t){if(String(t)){te(t)&&(t=new le(String(t)));var e=this.chunks[this.chunks.length-1],n=e&&(e.stop===t.stop||null==t.stop)&&t.from===e.from+e.toString().length;if(t instanceof le)n?e.extend(t.toString()):this.chunks.push(t);else if(t instanceof l){if(null==t.stop)for(var u;t.chunks.length&&null==t.chunks[0].stop;)(u=t.chunks.shift()).from+=t.from,this.extend(u);t.toString()&&(t.stop=t.blockIndex,this.chunks.push(t))}}}},{key:"appendTo",value:function(t){if(!(t instanceof he.MaskedPattern))return new le(this.toString()).appendTo(t);for(var e=new oe,n=0;n<this.chunks.length&&!e.skip;++n){var u=this.chunks[n],i=t._mapPosToBlock(t.value.length),r=u.stop,a=void 0;if(r&&(!i||i.index<=r)&&((u instanceof l||0<=t._stops.indexOf(r))&&e.aggregate(t._appendPlaceholder(r)),a=u instanceof l&&t._blocks[r]),a){var s=a.appendTail(u);s.skip=!1,e.aggregate(s),t._value+=s.inserted;var o=u.toString().slice(s.rawInserted.length);o&&e.aggregate(t.append(o,{tail:!0}))}else e.aggregate(t.append(u.toString(),{tail:!0}))}return e}},{key:"shiftBefore",value:function(t){if(this.from>=t||!this.chunks.length)return"";for(var e=t-this.from,n=0;n<this.chunks.length;){var u=this.chunks[n],i=u.shiftBefore(e);if(u.toString()){if(!i)break;++n}else this.chunks.splice(n,1);if(i)return i}return""}},{key:"state",get:function(){return{chunks:this.chunks.map(function(t){return t.state}),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(t){var e=t.chunks,n=Gt(t,["chunks"]);Object.assign(this,n),this.chunks=e.map(function(t){var e=new("chunks"in t?l:le);return e.state=t,e})}}]),l}(),ye=function(){function l(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return Ut(this,l),t.definitions=Object.assign({},de,t.definitions),Wt(this,Zt(l).call(this,Object.assign({},l.DEFAULTS,{},t)))}return Yt(l,ce),Ht(l,[{key:"_update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};e.definitions=Object.assign({},this.definitions,e.definitions),$t(Zt(l.prototype),"_update",this).call(this,e),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var i=this,t=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var r=this.mask;if(r&&t)for(var e=!1,n=!1,a=0;a<r.length;++a){if(this.blocks)if("continue"===function(){var e=r.slice(a),t=Object.keys(i.blocks).filter(function(t){return 0===e.indexOf(t)});t.sort(function(t,e){return e.length-t.length});var n=t[0];if(n){var u=pe(Object.assign({parent:i,lazy:i.lazy,placeholderChar:i.placeholderChar,overwrite:i.overwrite},i.blocks[n]));return u&&(i._blocks.push(u),i._maskedBlocks[n]||(i._maskedBlocks[n]=[]),i._maskedBlocks[n].push(i._blocks.length-1)),a+=n.length-1,"continue"}}())continue;var u=r[a],s=u in t;if(u!==l.STOP_CHAR)if("{"!==u&&"}"!==u)if("["!==u&&"]"!==u){if(u===l.ESCAPE_CHAR){if(!(u=r[++a]))break;s=!1}var o=s?new ve({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:t[u],isOptional:n}):new ke({char:u,isUnmasking:e});this._blocks.push(o)}else n=!n;else e=!e;else this._stops.push(this._blocks.length)}}},{key:"reset",value:function(){$t(Zt(l.prototype),"reset",this).call(this),this._blocks.forEach(function(t){return t.reset()})}},{key:"doCommit",value:function(){this._blocks.forEach(function(t){return t.doCommit()}),$t(Zt(l.prototype),"doCommit",this).call(this)}},{key:"appendTail",value:function(t){return $t(Zt(l.prototype),"appendTail",this).call(this,t).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};t=this.doPrepare(t,n);var u=this._mapPosToBlock(this.value.length),i=new oe;if(!u)return i;for(var r=u.index;;++r){var a=this._blocks[r];if(!a)break;var s=a._appendChar(t,n),o=s.skip;if(i.aggregate(s),o||s.rawInserted)break}return i}},{key:"extractTail",value:function(t,e){var r=this,n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,a=new ge;return n===u||this._forEachBlocksInRange(n,u,function(t,e,n,u){var i=t.extractTail(n,u);i.stop=r._findStopBefore(e),i.from=r._blockStartPos(e),i instanceof ge&&(i.blockIndex=e),a.extend(i)}),a}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length&&void 0!==n?n:{};if(u===i)return"";var a="";return this._forEachBlocksInRange(u,i,function(t,e,n,u){a+=t.extractInput(n,u,r)}),a}},{key:"_findStopBefore",value:function(t){for(var e,n=0;n<this._stops.length;++n){var u=this._stops[n];if(!(u<=t))break;e=u}return e}},{key:"_appendPlaceholder",value:function(u){var i=this,r=new oe;if(this.lazy&&null==u)return r;var t=this._mapPosToBlock(this.value.length);if(!t)return r;var e=t.index,n=null!=u?u:this._blocks.length;return this._blocks.slice(e,n).forEach(function(t){if(!t.lazy||null!=u){var e=null!=t._blocks?[t._blocks.length]:[],n=t._appendPlaceholder.apply(t,e);i._value+=n.inserted,r.aggregate(n)}}),r}},{key:"_mapPosToBlock",value:function(t){for(var e="",n=0;n<this._blocks.length;++n){var u=this._blocks[n],i=e.length;if(t<=(e+=u.value).length)return{index:n,offset:t-i}}}},{key:"_blockStartPos",value:function(t){return this._blocks.slice(0,t).reduce(function(t,e){return t+e.value.length},0)}},{key:"_forEachBlocksInRange",value:function(t,e,n){var u=1<arguments.length&&void 0!==e?e:this.value.length,i=2<arguments.length?n:void 0,r=this._mapPosToBlock(t);if(r){var a=this._mapPosToBlock(u),s=a&&r.index===a.index,o=r.offset,l=a&&s?a.offset:this._blocks[r.index].value.length;if(i(this._blocks[r.index],r.index,o,l),a&&!s){for(var h=r.index+1;h<a.index;++h)i(this._blocks[h],h,0,this._blocks[h].value.length);i(this._blocks[a.index],a.index,0,a.offset)}}}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,i=$t(Zt(l.prototype),"remove",this).call(this,n,u);return this._forEachBlocksInRange(n,u,function(t,e,n,u){i.aggregate(t.remove(n,u))}),i}},{key:"nearestInputPos",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:ee,u=this._mapPosToBlock(t)||{index:0,offset:0},i=u.offset,r=u.index,a=this._blocks[r];if(!a)return t;var s=i;0!==s&&s<a.value.length&&(s=a.nearestInputPos(i,function(t){switch(t){case ne:return ue;case ie:return re;default:return t}}(n)));var o=s===a.value.length;if(!(0===s)&&!o)return this._blockStartPos(r)+s;var l=o?r+1:r;if(n===ee){if(0<l){var h=l-1,c=this._blocks[h],f=c.nearestInputPos(0,ee);if(!c.value.length||f!==c.value.length)return this._blockStartPos(l)}for(var p=l;p<this._blocks.length;++p){var d=this._blocks[p],v=d.nearestInputPos(0,ee);if(!d.value.length||v!==d.value.length)return this._blockStartPos(p)+v}for(var k=l-1;0<=k;--k){var g=this._blocks[k],y=g.nearestInputPos(0,ee);if(!g.value.length||y!==g.value.length)return this._blockStartPos(k)+g.value.length}return t}if(n===ne||n===ue){for(var m,_=l;_<this._blocks.length;++_)if(this._blocks[_].value){m=_;break}if(null!=m){var A=this._blocks[m],b=A.nearestInputPos(0,ie);if(0===b&&A.unmaskedValue.length)return this._blockStartPos(m)+b}for(var C,E=-1,F=l-1;0<=F;--F){var S=this._blocks[F],D=S.nearestInputPos(S.value.length,ue);if(S.value&&0===D||(C=F),0!==D){if(D!==S.value.length)return this._blockStartPos(F)+D;E=F;break}}if(n===ne)for(var B=E+1;B<=Math.min(l,this._blocks.length-1);++B){var w=this._blocks[B],M=w.nearestInputPos(0,ee),x=this._blockStartPos(B)+M;if(t<x)break;if(M!==w.value.length)return x}if(0<=E)return this._blockStartPos(E)+this._blocks[E].value.length;if(n===ue||this.lazy&&!this.extractInput()&&!function(t){if(!t)return;var e=t.value;return!e||t.nearestInputPos(0,ee)!==e.length}(this._blocks[l]))return 0;if(null!=C)return this._blockStartPos(C);for(var P=l;P<this._blocks.length;++P){var O=this._blocks[P],T=O.nearestInputPos(0,ee);if(!O.value.length||T!==O.value.length)return this._blockStartPos(P)+T}return 0}if(n===ie||n===re){for(var I,j,V=l;V<this._blocks.length;++V){var R=this._blocks[V],L=R.nearestInputPos(0,ee);if(L!==R.value.length){j=this._blockStartPos(V)+L,I=V;break}}if(null!=I&&null!=j){for(var N=I;N<this._blocks.length;++N){var U=this._blocks[N],z=U.nearestInputPos(0,re);if(z!==U.value.length)return this._blockStartPos(N)+z}return n===re?this.value.length:j}for(var H=Math.min(l,this._blocks.length-1);0<=H;--H){var Y=this._blocks[H],Z=Y.nearestInputPos(Y.value.length,ne);if(0!==Z){var K=this._blockStartPos(H)+Z;if(t<=K)return K;break}}}return t}},{key:"maskedBlock",value:function(t){return this.maskedBlocks(t)[0]}},{key:"maskedBlocks",value:function(t){var e=this,n=this._maskedBlocks[t];return n?n.map(function(t){return e._blocks[t]}):[]}},{key:"state",get:function(){return Object.assign({},$t(Zt(l.prototype),"state",this),{_blocks:this._blocks.map(function(t){return t.state})})},set:function(t){var n=t._blocks,e=Gt(t,["_blocks"]);this._blocks.forEach(function(t,e){return t.state=n[e]}),Jt(Zt(l.prototype),"state",e,this,!0)}},{key:"isComplete",get:function(){return this._blocks.every(function(t){return t.isComplete})}},{key:"unmaskedValue",get:function(){return this._blocks.reduce(function(t,e){return t+e.unmaskedValue},"")},set:function(t){Jt(Zt(l.prototype),"unmaskedValue",t,this,!0)}},{key:"value",get:function(){return this._blocks.reduce(function(t,e){return t+e.value},"")},set:function(t){Jt(Zt(l.prototype),"value",t,this,!0)}}]),l}();ye.DEFAULTS={lazy:!0,placeholderChar:"_"},ye.STOP_CHAR="`",ye.ESCAPE_CHAR="\\",ye.InputDefinition=ve,ye.FixedDefinition=ke,he.MaskedPattern=ye;var me=function(){function f(){return Ut(this,f),Wt(this,Zt(f).apply(this,arguments))}return Yt(f,ye),Ht(f,[{key:"_update",value:function(t){t=Object.assign({to:this.to||0,from:this.from||0},t);var e=String(t.to).length;null!=t.maxLength&&(e=Math.max(e,t.maxLength)),t.maxLength=e;for(var n=String(t.from).padStart(e,"0"),u=String(t.to).padStart(e,"0"),i=0;i<u.length&&u[i]===n[i];)++i;t.mask=u.slice(0,i).replace(/0/g,"\\0")+"0".repeat(e-i),$t(Zt(f.prototype),"_update",this).call(this,t)}},{key:"boundaries",value:function(t){var e="",n="",u=Qt(t.match(/^(\D*)(\d*)(\D*)/)||[],3),i=u[1],r=u[2];return r&&(e="0".repeat(i.length)+r,n="9".repeat(i.length)+r),[e=e.padEnd(this.maxLength,"0"),n=n.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(t=$t(Zt(f.prototype),"doPrepare",this).call(this,t,n).replace(/\D/g,""),!this.autofix)return t;for(var u=String(this.from).padStart(this.maxLength,"0"),i=String(this.to).padStart(this.maxLength,"0"),r=this.value,a="",s=0;s<t.length;++s){var o=r+a+t[s],l=Qt(this.boundaries(o),2),h=l[0],c=l[1];Number(c)<this.from?a+=u[o.length-1]:Number(h)>this.to?a+=i[o.length-1]:a+=t[s]}return a}},{key:"doValidate",value:function(){var t,e=this.value;if(-1===e.search(/[^0]/)&&e.length<=this._matchFrom)return!0;for(var n=Qt(this.boundaries(e),2),u=n[0],i=n[1],r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return this.from<=Number(i)&&Number(u)<=this.to&&(t=$t(Zt(f.prototype),"doValidate",this)).call.apply(t,[this].concat(a))}},{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"isComplete",get:function(){return $t(Zt(f.prototype),"isComplete",this)&&Boolean(this.value)}}]),f}();he.MaskedRange=me;var _e=function(){function r(t){return Ut(this,r),Wt(this,Zt(r).call(this,Object.assign({},r.DEFAULTS,{},t)))}return Yt(r,ye),Ht(r,[{key:"_update",value:function(n){n.mask===Date&&delete n.mask,n.pattern&&(n.mask=n.pattern);var t=n.blocks;n.blocks=Object.assign({},r.GET_DEFAULT_BLOCKS()),n.min&&(n.blocks.Y.from=n.min.getFullYear()),n.max&&(n.blocks.Y.to=n.max.getFullYear()),n.min&&n.max&&n.blocks.Y.from===n.blocks.Y.to&&(n.blocks.m.from=n.min.getMonth()+1,n.blocks.m.to=n.max.getMonth()+1,n.blocks.m.from===n.blocks.m.to&&(n.blocks.d.from=n.min.getDate(),n.blocks.d.to=n.max.getDate())),Object.assign(n.blocks,t),Object.keys(n.blocks).forEach(function(t){var e=n.blocks[t];"autofix"in e||(e.autofix=n.autofix)}),$t(Zt(r.prototype),"_update",this).call(this,n)}},{key:"doValidate",value:function(){for(var t,e=this.date,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return(t=$t(Zt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.isComplete||this.isDateExist(this.value)&&null!=e&&(null==this.min||this.min<=e)&&(null==this.max||e<=this.max))}},{key:"isDateExist",value:function(t){return this.format(this.parse(t,this),this)===t}},{key:"date",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"typedValue",get:function(){return this.isComplete?$t(Zt(r.prototype),"typedValue",this):null},set:function(t){Jt(Zt(r.prototype),"typedValue",t,this,!0)}}]),r}();_e.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(t){return[String(t.getDate()).padStart(2,"0"),String(t.getMonth()+1).padStart(2,"0"),t.getFullYear()].join(".")},parse:function(t){var e=Qt(t.split("."),3),n=e[0],u=e[1],i=e[2];return new Date(i,u-1,n)}},_e.GET_DEFAULT_BLOCKS=function(){return{d:{mask:me,from:1,to:31,maxLength:2},m:{mask:me,from:1,to:12,maxLength:2},Y:{mask:me,from:1900,to:9999}}},he.MaskedDate=_e;var Ae=function(){function t(){Ut(this,t)}return Ht(t,[{key:"select",value:function(t,e){if(null!=t&&null!=e&&(t!==this.selectionStart||e!==this.selectionEnd))try{this._unsafeSelect(t,e)}catch(t){}}},{key:"_unsafeSelect",value:function(){}},{key:"bindEvents",value:function(){}},{key:"unbindEvents",value:function(){}},{key:"selectionStart",get:function(){var t;try{t=this._unsafeSelectionStart}catch(t){}return null!=t?t:this.value.length}},{key:"selectionEnd",get:function(){var t;try{t=this._unsafeSelectionEnd}catch(t){}return null!=t?t:this.value.length}},{key:"isActive",get:function(){return!1}}]),t}();he.MaskElement=Ae;var be=function(){function u(t){var e;return Ut(this,u),(e=Wt(this,Zt(u).call(this))).input=t,e._handlers={},e}return Yt(u,Ae),Ht(u,[{key:"_unsafeSelect",value:function(t,e){this.input.setSelectionRange(t,e)}},{key:"bindEvents",value:function(e){var n=this;Object.keys(e).forEach(function(t){return n._toggleEventHandler(u.EVENTS_MAP[t],e[t])})}},{key:"unbindEvents",value:function(){var e=this;Object.keys(this._handlers).forEach(function(t){return e._toggleEventHandler(t)})}},{key:"_toggleEventHandler",value:function(t,e){this._handlers[t]&&(this.input.removeEventListener(t,this._handlers[t]),delete this._handlers[t]),e&&(this.input.addEventListener(t,e),this._handlers[t]=e)}},{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"value",get:function(){return this.input.value},set:function(t){this.input.value=t}}]),u}();be.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},he.HTMLMaskElement=be;var Ce=function(){function t(){return Ut(this,t),Wt(this,Zt(t).apply(this,arguments))}return Yt(t,be),Ht(t,[{key:"_unsafeSelect",value:function(t,e){if(this.rootElement.createRange){var n=this.rootElement.createRange();n.setStart(this.input.firstChild||this.input,t),n.setEnd(this.input.lastChild||this.input,e);var u=this.rootElement,i=u.getSelection&&u.getSelection();i&&(i.removeAllRanges(),i.addRange(n))}}},{key:"_unsafeSelectionStart",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&e.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var t=this.rootElement,e=t.getSelection&&t.getSelection();return e&&this._unsafeSelectionStart+String(e).length}},{key:"value",get:function(){return this.input.textContent},set:function(t){this.input.textContent=t}}]),t}();he.HTMLContenteditableMaskElement=Ce;var Ee=function(){function n(t,e){Ut(this,n),this.el=t instanceof Ae?t:new(t.isContentEditable&&"INPUT"!==t.tagName&&"TEXTAREA"!==t.tagName?Ce:be)(t),this.masked=pe(e),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return Ht(n,[{key:"maskEquals",value:function(t){return null==t||t===this.masked.mask||t===Date&&this.masked instanceof _e}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el.unbindEvents()}},{key:"_fireEvent",value:function(t){var e=this._listeners[t];e&&e.forEach(function(t){return t()})}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var t=this.masked.unmaskedValue,e=this.masked.value,n=this.unmaskedValue!==t||this.value!==e;this._unmaskedValue=t,this._value=e,this.el.value!==e&&(this.el.value=e),n&&this._fireChangeEvents()}},{key:"updateOptions",value:function(t){var e=t.mask,n=Gt(t,["mask"]),u=!this.maskEquals(e),i=!function t(e,n){if(n===e)return 1;var u,i=Array.isArray(n),r=Array.isArray(e);if(i&&r){if(n.length!=e.length)return;for(u=0;u<n.length;u++)if(!t(n[u],e[u]))return;return 1}if(i==r){if(n&&e&&"object"===Nt(n)&&"object"===Nt(e)){var a=n instanceof Date,s=e instanceof Date;if(a&&s)return n.getTime()==e.getTime();if(a!=s)return;var o=n instanceof RegExp,l=e instanceof RegExp;if(o&&l)return n.toString()==e.toString();if(o!=l)return;var h=Object.keys(n);for(u=0;u<h.length;u++)if(!Object.prototype.hasOwnProperty.call(e,h[u]))return;for(u=0;u<h.length;u++)if(!t(e[h[u]],n[h[u]]))return;return 1}return n&&e&&"function"==typeof n&&"function"==typeof e&&n.toString()===e.toString()}}(this.masked,n);u&&(this.mask=e),i&&this.masked.updateOptions(n),(u||i)&&this.updateControl()}},{key:"updateCursor",value:function(t){null!=t&&(this.cursorPos=t,this._delayUpdateCursor(t))}},{key:"_delayUpdateCursor",value:function(t){var e=this;this._abortUpdateCursor(),this._changingCursorPos=t,this._cursorChanging=setTimeout(function(){e.el&&(e.cursorPos=e._changingCursorPos,e._abortUpdateCursor())},10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept"),this.masked.isComplete&&this._fireEvent("complete")}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,ne)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(t,e){return this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),this}},{key:"off",value:function(t,e){if(!this._listeners[t])return this;if(!e)return delete this._listeners[t],this;var n=this._listeners[t].indexOf(e);return 0<=n&&this._listeners[t].splice(n,1),this}},{key:"_onInput",value:function(){if(this._abortUpdateCursor(),!this._selection)return this.updateValue();var t=new se(this.el.value,this.cursorPos,this.value,this._selection),e=this.masked.rawInputValue,n=this.masked.splice(t.startChangePos,t.removed.length,t.inserted,t.removeDirection).offset,u=e===this.masked.rawInputValue?t.removeDirection:ee,i=this.masked.nearestInputPos(t.startChangePos+n,u);this.updateControl(),this.updateCursor(i)}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(t){t.preventDefault(),t.stopPropagation()}},{key:"_onFocus",value:function(){this.alignCursorFriendly()}},{key:"_onClick",value:function(){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}},{key:"mask",get:function(){return this.masked.mask},set:function(t){if(!this.maskEquals(t))if(this.masked.constructor!==fe(t)){var e=pe({mask:t});e.unmaskedValue=this.masked.unmaskedValue,this.masked=e}else this.masked.updateOptions({mask:t})}},{key:"value",get:function(){return this._value},set:function(t){this.masked.value=t,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(t){this.masked.unmaskedValue=t,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(t){this.masked.typedValue=t,this.updateControl(),this.alignCursor()}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(t){this.el.isActive&&(this.el.select(t,t),this._saveSelection())}}]),n}();he.InputMask=Ee;var Fe=function(){function r(){return Ut(this,r),Wt(this,Zt(r).apply(this,arguments))}return Yt(r,ye),Ht(r,[{key:"_update",value:function(t){t.enum&&(t.mask="*".repeat(t.enum[0].length)),$t(Zt(r.prototype),"_update",this).call(this,t)}},{key:"doValidate",value:function(){for(var t,e=this,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.enum.some(function(t){return 0<=t.indexOf(e.unmaskedValue)})&&(t=$t(Zt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))}}]),r}();he.MaskedEnum=Fe;var Se=function(){function o(t){return Ut(this,o),Wt(this,Zt(o).call(this,Object.assign({},o.DEFAULTS,{},t)))}return Yt(o,ce),Ht(o,[{key:"_update",value:function(t){$t(Zt(o.prototype),"_update",this).call(this,t),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var t="^"+(this.allowNegative?"[+|\\-]?":""),e=(this.scale?"("+ae(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(t+"(0|([1-9]+\\d*))?"+e),this._numberRegExp=new RegExp(t+"\\d*"+e),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(ae).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(ae(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(t){return t.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(t){var e=t.split(this.radix);return e[0]=e[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),e.join(this.radix)}},{key:"doPrepare",value:function(t){for(var e,n=arguments.length,u=new Array(1<n?n-1:0),i=1;i<n;i++)u[i-1]=arguments[i];return(e=$t(Zt(o.prototype),"doPrepare",this)).call.apply(e,[this,this._removeThousandsSeparators(t.replace(this._mapToRadixRegExp,this.radix))].concat(u))}},{key:"_separatorsCount",value:function(t,e){for(var n=1<arguments.length&&void 0!==e&&e,u=0,i=0;i<t;++i)this._value.indexOf(this.thousandsSeparator,i)===i&&(++u,n&&(t+=this.thousandsSeparator.length));return u}},{key:"_separatorsCountFromSlice",value:function(t){var e=0<arguments.length&&void 0!==t?t:this._value;return this._separatorsCount(this._removeThousandsSeparators(e).length,!0)}},{key:"extractInput",value:function(t,e,n){var u=0<arguments.length&&void 0!==t?t:0,i=1<arguments.length&&void 0!==e?e:this.value.length,r=2<arguments.length?n:void 0,a=Qt(this._adjustRangeWithSeparators(u,i),2);return u=a[0],i=a[1],this._removeThousandsSeparators($t(Zt(o.prototype),"extractInput",this).call(this,u,i,r))}},{key:"_appendCharRaw",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};if(!this.thousandsSeparator)return $t(Zt(o.prototype),"_appendCharRaw",this).call(this,t,n);var u=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,i=this._separatorsCountFromSlice(u);this._value=this._removeThousandsSeparators(this.value);var r=$t(Zt(o.prototype),"_appendCharRaw",this).call(this,t,n);this._value=this._insertThousandsSeparators(this._value);var a=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,s=this._separatorsCountFromSlice(a);return r.tailShift+=(s-i)*this.thousandsSeparator.length,r}},{key:"_findSeparatorAround",value:function(t){if(this.thousandsSeparator){var e=t-this.thousandsSeparator.length+1,n=this.value.indexOf(this.thousandsSeparator,e);if(n<=t)return n}return-1}},{key:"_adjustRangeWithSeparators",value:function(t,e){var n=this._findSeparatorAround(t);0<=n&&(t=n);var u=this._findSeparatorAround(e);return 0<=u&&(e=u+this.thousandsSeparator.length),[t,e]}},{key:"remove",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:0,u=1<arguments.length&&void 0!==e?e:this.value.length,i=Qt(this._adjustRangeWithSeparators(n,u),2);n=i[0],u=i[1];var r=this.value.slice(0,n),a=this.value.slice(u),s=this._separatorsCount(r.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(r+a));var o=this._separatorsCountFromSlice(r);return new oe({tailShift:(o-s)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(t,e){if(!this.thousandsSeparator)return t;switch(e){case ee:case ne:case ue:var n=this._findSeparatorAround(t-1);if(0<=n){var u=n+this.thousandsSeparator.length;if(t<u||this.value.length<=u||e===ue)return n}break;case ie:case re:var i=this._findSeparatorAround(t);if(0<=i)return i+this.thousandsSeparator.length}return t}},{key:"doValidate",value:function(t){var e=(t.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));if(e){var n=this.number;e=e&&!isNaN(n)&&(null==this.min||0<=this.min||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)}return e&&$t(Zt(o.prototype),"doValidate",this).call(this,t)}},{key:"doCommit",value:function(){if(this.value){var t=this.number,e=t;null!=this.min&&(e=Math.max(e,this.min)),null!=this.max&&(e=Math.min(e,this.max)),e!==t&&(this.unmaskedValue=String(e));var n=this.value;this.normalizeZeros&&(n=this._normalizeZeros(n)),this.padFractionalZeros&&(n=this._padFractionalZeros(n)),this._value=n}$t(Zt(o.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(t){var e=this._removeThousandsSeparators(t).split(this.radix);return e[0]=e[0].replace(/^(\D*)(0*)(\d*)/,function(t,e,n,u){return e+u}),t.length&&!/\d$/.test(e[0])&&(e[0]=e[0]+"0"),1<e.length&&(e[1]=e[1].replace(/0*$/,""),e[1].length||(e.length=1)),this._insertThousandsSeparators(e.join(this.radix))}},{key:"_padFractionalZeros",value:function(t){if(!t)return t;var e=t.split(this.radix);return e.length<2&&e.push(""),e[1]=e[1].padEnd(this.scale,"0"),e.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(t){Jt(Zt(o.prototype),"unmaskedValue",t.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(t){Jt(Zt(o.prototype),"unmaskedValue",String(t),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(t){this.typedValue=t}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),o}();Se.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},he.MaskedNumber=Se;var De=function(){function t(){return Ut(this,t),Wt(this,Zt(t).apply(this,arguments))}return Yt(t,ce),Ht(t,[{key:"_update",value:function(e){e.mask&&(e.validate=function(t){return 0<=t.search(e.mask)}),$t(Zt(t.prototype),"_update",this).call(this,e)}}]),t}();he.MaskedRegExp=De;var Be=function(){function e(){return Ut(this,e),Wt(this,Zt(e).apply(this,arguments))}return Yt(e,ce),Ht(e,[{key:"_update",value:function(t){t.mask&&(t.validate=t.mask),$t(Zt(e.prototype),"_update",this).call(this,t)}}]),e}();he.MaskedFunction=Be;var we=function(){function r(t){var e;return Ut(this,r),(e=Wt(this,Zt(r).call(this,Object.assign({},r.DEFAULTS,{},t)))).currentMask=null,e}return Yt(r,ce),Ht(r,[{key:"_update",value:function(t){$t(Zt(r.prototype),"_update",this).call(this,t),"mask"in t&&(this.compiledMasks=Array.isArray(t.mask)?t.mask.map(function(t){return pe(t)}):[])}},{key:"_appendCharRaw",value:function(){var t,e=this._applyDispatch.apply(this,arguments);this.currentMask&&e.aggregate((t=this.currentMask)._appendChar.apply(t,arguments));return e}},{key:"_applyDispatch",value:function(t,e){var n=0<arguments.length&&void 0!==t?t:"",u=1<arguments.length&&void 0!==e?e:{},i=u.tail&&null!=u._beforeTailState?u._beforeTailState._value:this.value,r=this.rawInputValue,a=u.tail&&null!=u._beforeTailState?u._beforeTailState._rawInputValue:r,s=r.slice(a.length),o=this.currentMask,l=new oe,h=o&&o.state;if(this.currentMask=this.doDispatch(n,Object.assign({},u)),this.currentMask)if(this.currentMask!==o){this.currentMask.reset();var c=this.currentMask.append(a,{raw:!0});l.tailShift=c.inserted.length-i.length,s&&(l.tailShift+=this.currentMask.append(s,{raw:!0,tail:!0}).tailShift)}else this.currentMask.state=h;return l}},{key:"_appendPlaceholder",value:function(){var t=this._applyDispatch.apply(this,arguments);return this.currentMask&&t.aggregate(this.currentMask._appendPlaceholder()),t}},{key:"doDispatch",value:function(t,e){var n=1<arguments.length&&void 0!==e?e:{};return this.dispatch(t,this,n)}},{key:"doValidate",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return(t=$t(Zt(r.prototype),"doValidate",this)).call.apply(t,[this].concat(u))&&(!this.currentMask||(e=this.currentMask).doValidate.apply(e,u))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach(function(t){return t.reset()})}},{key:"remove",value:function(){var t,e=new oe;this.currentMask&&e.aggregate((t=this.currentMask).remove.apply(t,arguments)).aggregate(this._applyDispatch());return e}},{key:"extractInput",value:function(){var t;return this.currentMask?(t=this.currentMask).extractInput.apply(t,arguments):""}},{key:"extractTail",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.currentMask?(t=this.currentMask).extractTail.apply(t,u):(e=$t(Zt(r.prototype),"extractTail",this)).call.apply(e,[this].concat(u))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),$t(Zt(r.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var t,e,n=arguments.length,u=new Array(n),i=0;i<n;i++)u[i]=arguments[i];return this.currentMask?(t=this.currentMask).nearestInputPos.apply(t,u):(e=$t(Zt(r.prototype),"nearestInputPos",this)).call.apply(e,[this].concat(u))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(t){Jt(Zt(r.prototype),"value",t,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(t){Jt(Zt(r.prototype),"unmaskedValue",t,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(t){var e=String(t);this.currentMask&&(this.currentMask.typedValue=t,e=this.currentMask.unmaskedValue),this.unmaskedValue=e}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"state",get:function(){return Object.assign({},$t(Zt(r.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map(function(t){return t.state}),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(t){var n=t.compiledMasks,e=t.currentMaskRef,u=t.currentMask,i=Gt(t,["compiledMasks","currentMaskRef","currentMask"]);this.compiledMasks.forEach(function(t,e){return t.state=n[e]}),null!=e&&(this.currentMask=e,this.currentMask.state=u),Jt(Zt(r.prototype),"state",i,this,!0)}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:$t(Zt(r.prototype),"overwrite",this)},set:function(){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),r}();we.DEFAULTS={dispatch:function(n,t,u){if(t.compiledMasks.length){var i=t.rawInputValue,e=t.compiledMasks.map(function(t,e){return t.reset(),t.append(i,{raw:!0}),t.append(n,u),{weight:t.rawInputValue.length,index:e}});return e.sort(function(t,e){return e.weight-t.weight}),t.compiledMasks[e[0].index]}}},he.MaskedDynamic=we;var Me={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function xe(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Me.MASKED,u=2<arguments.length&&void 0!==arguments[2]?arguments[2]:Me.MASKED,i=pe(t);return function(e){return i.runIsolated(function(t){return t[n]=e,t[u]})}}function Pe(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),u=1;u<e;u++)n[u-1]=arguments[u];return xe.apply(void 0,n)(t)}he.PIPE_TYPE=Me,he.createPipe=xe,he.pipe=Pe,globalThis.IMask=he,t.HTMLContenteditableMaskElement=Ce,t.HTMLMaskElement=be,t.InputMask=Ee,t.MaskElement=Ae,t.Masked=ce,t.MaskedDate=_e,t.MaskedDynamic=we,t.MaskedEnum=Fe,t.MaskedFunction=Be,t.MaskedNumber=Se,t.MaskedPattern=ye,t.MaskedRange=me,t.MaskedRegExp=De,t.PIPE_TYPE=Me,t.createMask=pe,t.createPipe=xe,t.default=he,t.pipe=Pe,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJJTWFzayIsInRoaXMiLCJjb21tb25qc0dsb2JhbCIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwiY2hlY2siLCJpdCIsIk1hdGgiLCJmYWlscyIsImV4ZWMiLCJlcnJvciIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImJpdG1hcCIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInRvSW5kZXhlZE9iamVjdCIsImluZGV4ZWRPYmplY3QiLCJpc09iamVjdCIsInRvUHJpbWl0aXZlIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwidmFsIiwidG9TdHJpbmciLCJjYWxsIiwidmFsdWVPZiIsImhhcyIsImtleSIsImhhc093blByb3BlcnR5IiwiYW5PYmplY3QiLCJTdHJpbmciLCJzZXRHbG9iYWwiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJnbG9iYWxfMSIsIkZ1bmN0aW9uIiwiZGVzY3JpcHRvcnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImEiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUiLCJmIiwiMSIsIlYiLCJkZXNjcmlwdG9yIiwic3BsaXQiLCJzbGljZSIsImRvY3VtZW50JDEiLCJkb2N1bWVudCIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJpZThEb21EZWZpbmUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwiUCIsIm5hdGl2ZURlZmluZVByb3BlcnR5Iiwib2JqZWN0RGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwib2JqZWN0IiwiU0hBUkVEIiwic2hhcmVkU3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInNldCIsImhhcyQxIiwiV2Vha01hcCIsIm5hdGl2ZVdlYWtNYXAiLCJ0ZXN0Iiwic2hhcmVkIiwicHVzaCIsInZlcnNpb24iLCJtb2RlIiwiY29weXJpZ2h0IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwia2V5cyIsImhpZGRlbktleXMiLCJXZWFrTWFwJDEiLCJzdG9yZSQxIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJTVEFURSIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwiZ2V0QnVpbHRJbiIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInBhdGgiLCJ0b0ludGVnZXIiLCJhcmd1bWVudCIsImlzTmFOIiwiZmxvb3IiLCJjZWlsIiwidG9MZW5ndGgiLCJtaW4iLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJpbnRlZ2VyIiwiaW5kZXgiLCJtYXgiLCJtaW4kMSIsIm9iamVjdEtleXNJbnRlcm5hbCIsIm5hbWVzIiwiaSIsInJlc3VsdCIsImluZGV4T2YiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0Iiwic291cmNlIiwib3duS2V5cyIsImlzRm9yY2VkIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsIl9leHBvcnQiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJwcm90b3R5cGUiLCJub1RhcmdldEdldCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciQxIiwiaXNGb3JjZWRfMSIsImZvcmNlZCIsInNoYW0iLCJyZWRlZmluZSIsImludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsInN0YXRlIiwidHlwZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsImluY2x1ZGVzIiwiZW51bUJ1Z0tleXMiLCJoaWRkZW5LZXlzJDEiLCJjb25jYXQiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInJlcGxhY2VtZW50Iiwic3RyaW5nIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwib2JqZWN0S2V5cyIsIm5hdGl2ZUFzc2lnbiIsImFzc2lnbiIsIm9iamVjdEFzc2lnbiIsImIiLCJBIiwiQiIsInN5bWJvbCIsIlN5bWJvbCIsImFscGhhYmV0IiwiZm9yRWFjaCIsImNociIsIlQiLCJhcmd1bWVudHNMZW5ndGgiLCJTIiwiaiIsImNyZWF0ZU1ldGhvZCQxIiwiSVNfRU5EIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nUmVwZWF0IiwiY2VpbCQxIiwicmVwZWF0IiwiY291bnQiLCJzdHIiLCJuIiwiSW5maW5pdHkiLCJSYW5nZUVycm9yIiwic3RyaW5nUGFkIiwic3RhcnQiLCJlbmQiLCJ1c2VyQWdlbnQiLCJ3ZWJraXRTdHJpbmdQYWRCdWciLCIkcGFkRW5kIiwicHJvdG8iLCJwYWRFbmQiLCIkcGFkU3RhcnQiLCJfdHlwZW9mIiwib2JqIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwiX2dldFByb3RvdHlwZU9mIiwibyIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfc3VwZXJQcm9wQmFzZSIsInByb3BlcnR5IiwiX2dldCIsInJlY2VpdmVyIiwiUmVmbGVjdCIsImJhc2UiLCJkZXNjIiwic2V0JDEiLCJfc2V0IiwiaXNTdHJpY3QiLCJFcnJvciIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJuZXh0IiwiZG9uZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJpc1N0cmluZyIsInBhZFN0YXJ0IiwiX1RfIiwiRElSRUNUSU9OIiwiZXNjYXBlUmVnRXhwIiwiQWN0aW9uRGV0YWlscyIsImN1cnNvclBvcyIsIm9sZFZhbHVlIiwib2xkU2VsZWN0aW9uIiwic3RhcnRDaGFuZ2VQb3MiLCJzdWJzdHIiLCJpbnNlcnRlZENvdW50IiwicmVtb3ZlZENvdW50Iiwic3Vic3RyaW5nIiwiQ2hhbmdlRGV0YWlscyIsImRldGFpbHMiLCJpbnNlcnRlZCIsInJhd0luc2VydGVkIiwic2tpcCIsInRhaWxTaGlmdCIsIkNvbnRpbnVvdXNUYWlsRGV0YWlscyIsImZyb20iLCJzdG9wIiwidGFpbCIsIm1hc2tlZCIsImFwcGVuZCIsImFnZ3JlZ2F0ZSIsIl9hcHBlbmRQbGFjZWhvbGRlciIsInBvcyIsInNoaWZ0Q2hhciIsIklucHV0TWFzayIsIk1hc2tlZCIsIm9wdHMiLCJfdmFsdWUiLCJfdXBkYXRlIiwiREVGQVVMVFMiLCJpc0luaXRpYWxpemVkIiwid2l0aFZhbHVlUmVmcmVzaCIsImJpbmQiLCJyZXNldCIsImRvQ29tbWl0IiwiZnJvbVBvcyIsInRvUG9zIiwiZXh0cmFjdElucHV0IiwiYXBwZW5kVG8iLCJjaCIsImZsYWdzIiwiZG9QcmVwYXJlIiwiY2hlY2tUYWlsIiwiY29uc2lzdGVudFN0YXRlIiwiX2FwcGVuZENoYXJSYXciLCJjb25zaXN0ZW50VGFpbCIsImFwcGVuZGVkIiwiZG9WYWxpZGF0ZSIsImJlZm9yZVRhaWxTdGF0ZSIsIm92ZXJ3cml0ZSIsInNoaWZ0QmVmb3JlIiwidGFpbERldGFpbHMiLCJhcHBlbmRUYWlsIiwiX2JlZm9yZVRhaWxTdGF0ZSIsImNpIiwiX2FwcGVuZENoYXIiLCJfcmVmcmVzaGluZyIsInJhd0lucHV0IiwicmF3SW5wdXRWYWx1ZSIsInJldCIsIl9pc29sYXRlZCIsInByZXBhcmUiLCJ2YWxpZGF0ZSIsInBhcmVudCIsImNvbW1pdCIsImZvcm1hdCIsInBhcnNlIiwiZGVsZXRlQ291bnQiLCJyZW1vdmVEaXJlY3Rpb24iLCJ0YWlsUG9zIiwiZXh0cmFjdFRhaWwiLCJuZWFyZXN0SW5wdXRQb3MiLCJyZW1vdmUiLCJyZXNvbHZlIiwiZG9QYXJzZSIsImRvRm9ybWF0IiwicmF3IiwibWFza2VkQ2xhc3MiLCJtYXNrIiwiUmVnRXhwIiwiTWFza2VkUmVnRXhwIiwiTWFza2VkUGF0dGVybiIsIkRhdGUiLCJNYXNrZWREYXRlIiwiTnVtYmVyIiwiTWFza2VkTnVtYmVyIiwiTWFza2VkRHluYW1pYyIsIk1hc2tlZEZ1bmN0aW9uIiwiY29uc29sZSIsIndhcm4iLCJjcmVhdGVNYXNrIiwiTWFza2VkQ2xhc3MiLCJ2IiwiREVGQVVMVF9JTlBVVF9ERUZJTklUSU9OUyIsIjAiLCIqIiwiUGF0dGVybklucHV0RGVmaW5pdGlvbiIsImJsb2NrT3B0cyIsIl9pc0ZpbGxlZCIsImlzT3B0aW9uYWwiLCJsYXp5IiwicGxhY2Vob2xkZXJDaGFyIiwiQm9vbGVhbiIsIl90aGlzJG1hc2tlZCIsImFwcGx5IiwiX3RoaXMkbWFza2VkMiIsIl90aGlzJG1hc2tlZDMiLCJkaXJlY3Rpb24iLCJtYXhQb3MiLCJib3VuZFBvcyIsImlzQ29tcGxldGUiLCJfdGhpcyRtYXNrZWQ0IiwiX3RoaXMkcGFyZW50IiwidW5tYXNrZWRWYWx1ZSIsIlBhdHRlcm5GaXhlZERlZmluaXRpb24iLCJfaXNSYXdJbnB1dCIsImlzUmVzb2x2ZWQiLCJjaGFyIiwiaXNVbm1hc2tpbmciLCJDaHVua3NUYWlsRGV0YWlscyIsImNodW5rcyIsIm1hcCIsInRhaWxDaHVuayIsImxhc3RDaHVuayIsImV4dGVuZExhc3QiLCJleHRlbmQiLCJmaXJzdFRhaWxDaHVuayIsInNoaWZ0IiwiYmxvY2tJbmRleCIsImNodW5rIiwibGFzdEJsb2NrSXRlciIsIl9tYXBQb3NUb0Jsb2NrIiwiY2h1bmtCbG9jayIsIl9zdG9wcyIsIl9ibG9ja3MiLCJyZW1haW5DaGFycyIsImNodW5rU2hpZnRQb3MiLCJzcGxpY2UiLCJjIiwiY3N0YXRlIiwiZGVmaW5pdGlvbnMiLCJfcmVidWlsZE1hc2siLCJfdGhpcyIsImRlZnMiLCJfbWFza2VkQmxvY2tzIiwicGF0dGVybiIsInVubWFza2luZ0Jsb2NrIiwib3B0aW9uYWxCbG9jayIsImJsb2NrcyIsImJOYW1lcyIsImZpbHRlciIsImJOYW1lIiwic29ydCIsIm1hc2tlZEJsb2NrIiwiX2lzSW5wdXQiLCJTVE9QX0NIQVIiLCJFU0NBUEVfQ0hBUiIsImRlZiIsImJsb2NrSXRlciIsImJpIiwiX2Jsb2NrIiwiYmxvY2tEZXRhaWxzIiwiX3RoaXMyIiwiY2h1bmtUYWlsIiwiX2ZvckVhY2hCbG9ja3NJblJhbmdlIiwiYkZyb21Qb3MiLCJiVG9Qb3MiLCJibG9ja0NodW5rIiwiX2ZpbmRTdG9wQmVmb3JlIiwiX2Jsb2NrU3RhcnRQb3MiLCJfIiwic3RvcEJlZm9yZSIsInNpIiwidG9CbG9ja0luZGV4IiwiX3RoaXMzIiwic3RhcnRCbG9ja0l0ZXIiLCJzdGFydEJsb2NrSW5kZXgiLCJlbmRCbG9ja0luZGV4IiwiYXJncyIsImJEZXRhaWxzIiwiYWNjVmFsIiwiX2Jsb2NrMiIsImJsb2NrU3RhcnRQb3MiLCJvZmZzZXQiLCJyZWR1Y2UiLCJmcm9tQmxvY2tJdGVyIiwidG9CbG9ja0l0ZXIiLCJpc1NhbWVCbG9jayIsImZyb21CbG9ja1N0YXJ0UG9zIiwiZnJvbUJsb2NrRW5kUG9zIiwicmVtb3ZlRGV0YWlscyIsImJlZ2luQmxvY2tEYXRhIiwiYmVnaW5CbG9ja09mZnNldCIsImJlZ2luQmxvY2tJbmRleCIsImJlZ2luQmxvY2siLCJiZWdpbkJsb2NrQ3Vyc29yUG9zIiwiZm9yY2VEaXJlY3Rpb24iLCJjdXJzb3JBdFJpZ2h0Iiwic2VhcmNoQmxvY2tJbmRleCIsImJsb2NrSW5kZXhBdExlZnQiLCJibG9ja0F0TGVmdCIsImJsb2NrSW5wdXRQb3MiLCJibG9ja0F0UmlnaHQiLCJfYmxvY2tJbnB1dFBvcyIsIl9iaSIsIl9ibG9jazMiLCJfYmxvY2tJbnB1dFBvczIiLCJmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0IiwiX2JpMiIsImZpbGxlZEJsb2NrIiwiX2Jsb2NrSW5wdXRQb3MzIiwiZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleCIsImZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4IiwiX2JpMyIsIl9ibG9jazQiLCJfYmxvY2tJbnB1dFBvczQiLCJfYmk0IiwiX2Jsb2NrNSIsIl9ibG9ja0lucHV0UG9zNSIsImJsb2NrQWxpZ25lZFBvcyIsImJsb2NrIiwiaXNJbnB1dCIsIl9iaTUiLCJfYmxvY2s2IiwiX2Jsb2NrSW5wdXRQb3M2IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4IiwiZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvcyIsIl9iaTYiLCJfYmxvY2s3IiwiX2Jsb2NrSW5wdXRQb3M3IiwiX2JpNyIsIl9ibG9jazgiLCJfYmxvY2tJbnB1dFBvczgiLCJfYmk4IiwiX2Jsb2NrOSIsIl9ibG9ja0lucHV0UG9zOSIsImFsaWduZWRQb3MiLCJuYW1lIiwibWFza2VkQmxvY2tzIiwiX3RoaXM0IiwiaW5kaWNlcyIsImdpIiwibWFza2VkU3RhdGUiLCJldmVyeSIsIklucHV0RGVmaW5pdGlvbiIsIkZpeGVkRGVmaW5pdGlvbiIsIk1hc2tlZFJhbmdlIiwidG8iLCJmcm9tU3RyIiwidG9TdHIiLCJzYW1lQ2hhcnNDb3VudCIsIm1pbnN0ciIsIm1heHN0ciIsIl9yZWYyIiwibWF0Y2giLCJwbGFjZWhvbGRlciIsIm51bSIsImF1dG9maXgiLCJwcmVwU3RyIiwibmV4dFZhbCIsIl90aGlzJGJvdW5kYXJpZXMyIiwiYm91bmRhcmllcyIsIl9nZXQyIiwic2VhcmNoIiwiX21hdGNoRnJvbSIsIl90aGlzJGJvdW5kYXJpZXM0IiwiX2xlbiIsIl9rZXkiLCJHRVRfREVGQVVMVF9CTE9DS1MiLCJZIiwiZ2V0RnVsbFllYXIiLCJtIiwiZ2V0TW9udGgiLCJkIiwiZ2V0RGF0ZSIsImJrIiwiZGF0ZSIsImlzRGF0ZUV4aXN0IiwidHlwZWRWYWx1ZSIsIl9zdHIkc3BsaXQyIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwiTWFza0VsZW1lbnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIl91bnNhZmVTZWxlY3QiLCJlIiwiX3Vuc2FmZVNlbGVjdGlvblN0YXJ0IiwiX3Vuc2FmZVNlbGVjdGlvbkVuZCIsIkhUTUxNYXNrRWxlbWVudCIsIl9oYW5kbGVycyIsInNldFNlbGVjdGlvblJhbmdlIiwiaGFuZGxlcnMiLCJldmVudCIsIl90b2dnbGVFdmVudEhhbmRsZXIiLCJFVkVOVFNfTUFQIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Um9vdE5vZGUiLCJyb290RWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJzZWxlY3Rpb25DaGFuZ2UiLCJkcm9wIiwiY2xpY2siLCJmb2N1cyIsIkhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCIsImNyZWF0ZVJhbmdlIiwicmFuZ2UiLCJzZXRTdGFydCIsImZpcnN0Q2hpbGQiLCJzZXRFbmQiLCJsYXN0Q2hpbGQiLCJyb290Iiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJhbmNob3JPZmZzZXQiLCJ0ZXh0Q29udGVudCIsImlzQ29udGVudEVkaXRhYmxlIiwidGFnTmFtZSIsIl9saXN0ZW5lcnMiLCJfdW5tYXNrZWRWYWx1ZSIsIl9zYXZlU2VsZWN0aW9uIiwiX29uSW5wdXQiLCJfb25DaGFuZ2UiLCJfb25Ecm9wIiwiX29uRm9jdXMiLCJfb25DbGljayIsImFsaWduQ3Vyc29yIiwiYWxpZ25DdXJzb3JGcmllbmRseSIsIl9iaW5kRXZlbnRzIiwidXBkYXRlVmFsdWUiLCJiaW5kRXZlbnRzIiwidW5iaW5kRXZlbnRzIiwiZXYiLCJsaXN0ZW5lcnMiLCJsIiwiX3NlbGVjdGlvbiIsIm5ld1VubWFza2VkVmFsdWUiLCJuZXdWYWx1ZSIsImlzQ2hhbmdlZCIsIl9maXJlQ2hhbmdlRXZlbnRzIiwicmVzdE9wdHMiLCJ1cGRhdGVNYXNrIiwibWFza0VxdWFscyIsInVwZGF0ZU9wdHMiLCJvYmplY3RJbmNsdWRlcyIsImFyckEiLCJhcnJCIiwiZGF0ZUEiLCJkYXRlQiIsImdldFRpbWUiLCJyZWdleHBBIiwicmVnZXhwQiIsInVwZGF0ZU9wdGlvbnMiLCJ1cGRhdGVDb250cm9sIiwiX2RlbGF5VXBkYXRlQ3Vyc29yIiwiX2Fib3J0VXBkYXRlQ3Vyc29yIiwiX2NoYW5naW5nQ3Vyc29yUG9zIiwiX2N1cnNvckNoYW5naW5nIiwic2V0VGltZW91dCIsIl9maXJlRXZlbnQiLCJjbGVhclRpbWVvdXQiLCJoSW5kZXgiLCJvbGRSYXdWYWx1ZSIsInJlbW92ZWQiLCJ1cGRhdGVDdXJzb3IiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIl91bmJpbmRFdmVudHMiLCJpc0FjdGl2ZSIsInNlbGVjdCIsIk1hc2tlZEVudW0iLCJlbnVtIiwic29tZSIsIl91cGRhdGVSZWdFeHBzIiwiYWxsb3dOZWdhdGl2ZSIsInNjYWxlIiwicmFkaXgiLCJfbnVtYmVyUmVnRXhwSW5wdXQiLCJfbnVtYmVyUmVnRXhwIiwiX21hcFRvUmFkaXhSZWdFeHAiLCJtYXBUb1JhZGl4IiwiX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCIsInRob3VzYW5kc1NlcGFyYXRvciIsInBhcnRzIiwiX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMiLCJleHRlbmRPblNlcGFyYXRvcnMiLCJfc2VwYXJhdG9yc0NvdW50IiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0MiIsIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzIiwicHJldkJlZm9yZVRhaWxWYWx1ZSIsInByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50IiwiX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSIsImFwcGVuZERldGFpbHMiLCJfaW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyIsImJlZm9yZVRhaWxWYWx1ZSIsImJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQiLCJzZWFyY2hGcm9tIiwic2VwYXJhdG9yUG9zIiwic2VwYXJhdG9yQXJvdW5kRnJvbVBvcyIsIl9maW5kU2VwYXJhdG9yQXJvdW5kIiwic2VwYXJhdG9yQXJvdW5kVG9Qb3MiLCJfdGhpcyRfYWRqdXN0UmFuZ2VXaXQ0IiwidmFsdWVCZWZvcmVQb3MiLCJ2YWx1ZUFmdGVyUG9zIiwic2VwYXJhdG9yQXRMZWZ0UG9zIiwic2VwYXJhdG9yQXRMZWZ0RW5kUG9zIiwic2VwYXJhdG9yQXRSaWdodFBvcyIsInZhbGlkIiwibnVtYmVyIiwidmFsaWRudW0iLCJmb3JtYXR0ZWQiLCJub3JtYWxpemVaZXJvcyIsIl9ub3JtYWxpemVaZXJvcyIsInBhZEZyYWN0aW9uYWxaZXJvcyIsIl9wYWRGcmFjdGlvbmFsWmVyb3MiLCJzaWduIiwiemVyb3MiLCJzaWduZWQiLCJjdXJyZW50TWFzayIsImNvbXBpbGVkTWFza3MiLCJfdGhpcyRjdXJyZW50TWFzayIsIl9hcHBseURpc3BhdGNoIiwicHJldlZhbHVlQmVmb3JlVGFpbCIsImlucHV0VmFsdWUiLCJpbnNlcnRWYWx1ZSIsIl9yYXdJbnB1dFZhbHVlIiwidGFpbFZhbHVlIiwicHJldk1hc2siLCJwcmV2TWFza1N0YXRlIiwiZG9EaXNwYXRjaCIsImRpc3BhdGNoIiwiX3RoaXMkY3VycmVudE1hc2syIiwiX3RoaXMkY3VycmVudE1hc2szIiwiX3RoaXMkY3VycmVudE1hc2s0IiwiX3RoaXMkY3VycmVudE1hc2s1IiwiX2dldDMiLCJfbGVuMiIsIl9rZXkyIiwiX3RoaXMkY3VycmVudE1hc2s2IiwiX2dldDQiLCJfbGVuMyIsIl9rZXkzIiwiY3VycmVudE1hc2tSZWYiLCJtaSIsImlucHV0cyIsIndlaWdodCIsImkxIiwiaTIiLCJQSVBFX1RZUEUiLCJNQVNLRUQiLCJVTk1BU0tFRCIsIlRZUEVEIiwiY3JlYXRlUGlwZSIsInJ1bklzb2xhdGVkIiwicGlwZSIsInBpcGVBcmdzIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBVUEsRUFBUUMsR0FDSSxpQkFBWkMsU0FBMEMsb0JBQVhDLE9BQXlCRixFQUFRQyxTQUNqRCxtQkFBWEUsUUFBeUJBLE9BQU9DLElBQU1ELE9BQU8sQ0FBQyxXQUFZSCxHQUNuQ0EsR0FBekJELEVBQVNBLEdBQVVNLE1BQXFCQyxNQUFRLElBSDdELENBSUVDLEtBQU0sU0FBV04sR0FDZixhQUVBLElBQUlPLEVBQXVDLG9CQUFmQyxXQUE2QkEsV0FBK0Isb0JBQVhDLE9BQXlCQSxPQUEyQixvQkFBWFgsT0FBeUJBLE9BQXlCLG9CQUFUTSxLQUF1QkEsS0FBTyxHQUU3TCxTQUFTTSxFQUFxQkMsRUFBSVYsR0FDOUIsT0FBaUNVLEVBQTFCVixFQUFTLENBQUVELFFBQVMsSUFBaUJDLEVBQU9ELFNBQVVDLEVBQU9ELFFB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UThXLGNBQWdCQSxHQUN4QjlXLEVBQVFtaEIsWUFBY0EsR0FDdEJuaEIsRUFBUTZXLGFBQWVBLEdBQ3ZCN1csRUFBUWt1QixVQUFZQSxHQUNwQmx1QixFQUFRdVgsV0FBYUEsR0FDckJ2WCxFQUFRc3VCLFdBQWFBLEdBQ3JCdHVCLEVBQVEwdUIsUUFBVXJ1QixHQUNsQkwsRUFBUXd1QixLQUFPQSxHQUVmenJCLE9BQU9DLGVBQWVoRCxFQUFTLGFBQWMsQ0FBRW9CLE9BQU8iLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxyXG4gICAgICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxyXG4gICAgICAgICAgICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLklNYXNrID0ge30pKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB2YXIgZ2xvYmFsXzEgPVxyXG4gICAgICAgIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8IGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fCBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fCBjaGVjayh0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpIHx8IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gICAgICAgIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcblxyXG4gICAgdmFyIGZhaWxzID0gZnVuY3Rpb24gKGV4ZWMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gISFleGVjKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZGVzY3JpcHRvcnMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuYSAhPSA3O1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxuXHJcbiAgICB2YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoe1xyXG4gICAgICAgIDE6IDJcclxuICAgIH0sIDEpO1xyXG5cclxuICAgIHZhciBmID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XHJcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XHJcbiAgICAgICAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XHJcbiAgICB9IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XHJcblxyXG4gICAgdmFyIG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlID0ge1xyXG4gICAgICAgIGY6IGZcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcclxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XHJcblxyXG4gICAgdmFyIGNsYXNzb2ZSYXcgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc3BsaXQgPSAnJy5zcGxpdDsgLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcclxuXHJcbiAgICB2YXIgaW5kZXhlZE9iamVjdCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNcdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xyXG4gICAgICAgIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XHJcbiAgICB9KSA/IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgIHJldHVybiBjbGFzc29mUmF3KGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XHJcbiAgICB9IDogT2JqZWN0O1xyXG5cclxuICAgIC8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cclxuICAgIHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgICAgICAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XHJcbiAgICAgICAgcmV0dXJuIGl0O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xyXG5cclxuXHJcblxyXG5cclxuICAgIHZhciB0b0luZGV4ZWRPYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICByZXR1cm4gaW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBpc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXHJcbiAgICAvLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxyXG4gICAgLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcclxuXHJcblxyXG4gICAgdmFyIHRvUHJpbWl0aXZlID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XHJcbiAgICAgICAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcclxuICAgICAgICB2YXIgZm4sIHZhbDtcclxuICAgICAgICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcclxuICAgICAgICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcclxuICAgICAgICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICB2YXIgaGFzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcclxuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGRvY3VtZW50JDEgPSBnbG9iYWxfMS5kb2N1bWVudDsgLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXHJcblxyXG4gICAgdmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50JDEpICYmIGlzT2JqZWN0KGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCk7XHJcblxyXG4gICAgdmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgIHJldHVybiBFWElTVFMgPyBkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcclxuXHJcblxyXG4gICAgdmFyIGllOERvbURlZmluZSA9ICFkZXNjcmlwdG9ycyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5hICE9IDc7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxyXG5cclxuICAgIHZhciBmJDEgPSBkZXNjcmlwdG9ycyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XHJcbiAgICAgICAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcclxuICAgICAgICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKGllOERvbURlZmluZSkgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvKiBlbXB0eSAqL1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mLmNhbGwoTywgUCksIE9bUF0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0ge1xyXG4gICAgICAgIGY6IGYkMVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgYW5PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGl0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGl0O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7IC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxyXG5cclxuICAgIHZhciBmJDIgPSBkZXNjcmlwdG9ycyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xyXG4gICAgICAgIGFuT2JqZWN0KE8pO1xyXG4gICAgICAgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcclxuICAgICAgICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcclxuICAgICAgICBpZiAoaWU4RG9tRGVmaW5lKSB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgLyogZW1wdHkgKi9cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xyXG4gICAgICAgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xyXG4gICAgICAgIHJldHVybiBPO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgb2JqZWN0RGVmaW5lUHJvcGVydHkgPSB7XHJcbiAgICAgICAgZjogZiQyXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBkZXNjcmlwdG9ycyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gb2JqZWN0RGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XHJcbiAgICB9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHNldEdsb2JhbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbF8xLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBnbG9iYWxfMVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcclxuICAgIHZhciBzdG9yZSA9IGdsb2JhbF8xW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xyXG4gICAgdmFyIHNoYXJlZFN0b3JlID0gc3RvcmU7XHJcblxyXG4gICAgdmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZzsgLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcclxuXHJcbiAgICBpZiAodHlwZW9mIHNoYXJlZFN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHNoYXJlZFN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5zcGVjdFNvdXJjZSA9IHNoYXJlZFN0b3JlLmluc3BlY3RTb3VyY2U7XHJcblxyXG4gICAgdmFyIFdlYWtNYXAgPSBnbG9iYWxfMS5XZWFrTWFwO1xyXG4gICAgdmFyIG5hdGl2ZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XHJcblxyXG4gICAgdmFyIHNoYXJlZCA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcclxuICAgICAgICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RvcmVba2V5XSB8fCAoc2hhcmVkU3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcclxuICAgICAgICB9KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XHJcbiAgICAgICAgICAgIHZlcnNpb246ICczLjQuOCcsXHJcbiAgICAgICAgICAgIG1vZGU6ICdnbG9iYWwnLFxyXG4gICAgICAgICAgICBjb3B5cmlnaHQ6ICfCqSdcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBpZCA9IDA7XHJcbiAgICB2YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XHJcblxyXG4gICAgdmFyIHVpZCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xyXG5cclxuICAgIHZhciBzaGFyZWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaGlkZGVuS2V5cyA9IHt9O1xyXG5cclxuICAgIHZhciBXZWFrTWFwJDEgPSBnbG9iYWxfMS5XZWFrTWFwO1xyXG4gICAgdmFyIHNldCwgZ2V0LCBoYXMkMTtcclxuXHJcbiAgICB2YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgIHJldHVybiBoYXMkMShpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKG5hdGl2ZVdlYWtNYXApIHtcclxuICAgICAgICB2YXIgc3RvcmUkMSA9IG5ldyBXZWFrTWFwJDEoKTtcclxuICAgICAgICB2YXIgd21nZXQgPSBzdG9yZSQxLmdldDtcclxuICAgICAgICB2YXIgd21oYXMgPSBzdG9yZSQxLmhhcztcclxuICAgICAgICB2YXIgd21zZXQgPSBzdG9yZSQxLnNldDtcclxuXHJcbiAgICAgICAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICB3bXNldC5jYWxsKHN0b3JlJDEsIGl0LCBtZXRhZGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUkMSwgaXQpIHx8IHt9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGhhcyQxID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlJDEsIGl0KTtcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XHJcbiAgICAgICAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xyXG5cclxuICAgICAgICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGdldCA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBoYXMkMSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFzKGl0LCBTVEFURSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW50ZXJuYWxTdGF0ZSA9IHtcclxuICAgICAgICBzZXQ6IHNldCxcclxuICAgICAgICBnZXQ6IGdldCxcclxuICAgICAgICBoYXM6IGhhcyQxLFxyXG4gICAgICAgIGVuZm9yY2U6IGVuZm9yY2UsXHJcbiAgICAgICAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3JcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHJlZGVmaW5lID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZS5nZXQ7XHJcbiAgICAgICAgdmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZS5lbmZvcmNlO1xyXG4gICAgICAgIHZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcclxuICAgICAgICAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKE8gPT09IGdsb2JhbF8xKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTsgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIE9ba2V5XTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICBzaW1wbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTsgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7IC8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxyXG4gICAgICAgIH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgcGF0aCA9IGdsb2JhbF8xO1xyXG5cclxuICAgIHZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldEJ1aWx0SW4gPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsXzFbbmFtZXNwYWNlXSkgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsXzFbbmFtZXNwYWNlXSAmJiBnbG9iYWxfMVtuYW1lc3BhY2VdW21ldGhvZF07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjZWlsID0gTWF0aC5jZWlsO1xyXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjsgLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXHJcblxyXG4gICAgdmFyIHRvSW50ZWdlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xyXG4gICAgICAgIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbWluID0gTWF0aC5taW47IC8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXHJcblxyXG4gICAgdmFyIHRvTGVuZ3RoID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1heCA9IE1hdGgubWF4O1xyXG4gICAgdmFyIG1pbiQxID0gTWF0aC5taW47IC8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxyXG4gICAgLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxyXG4gICAgLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cclxuXHJcbiAgICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcclxuICAgICAgICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDEoaW50ZWdlciwgbGVuZ3RoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cclxuXHJcblxyXG4gICAgdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWU7IC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG5cclxuICAgICAgICAgICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7IC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcclxuICAgICAgICAgICAgfSBlbHNlIGZvciAoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFycmF5SW5jbHVkZXMgPSB7XHJcbiAgICAgICAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXHJcbiAgICAgICAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcclxuICAgICAgICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxyXG4gICAgICAgIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGluZGV4T2YgPSBhcnJheUluY2x1ZGVzLmluZGV4T2Y7XHJcblxyXG5cclxuXHJcbiAgICB2YXIgb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcclxuICAgICAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xyXG4gICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7IC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcclxuXHJcblxyXG4gICAgICAgIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XHJcbiAgICAgICAgICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXHJcbiAgICB2YXIgZW51bUJ1Z0tleXMgPSBbJ2NvbnN0cnVjdG9yJywgJ2hhc093blByb3BlcnR5JywgJ2lzUHJvdG90eXBlT2YnLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAndG9Mb2NhbGVTdHJpbmcnLCAndG9TdHJpbmcnLCAndmFsdWVPZiddO1xyXG5cclxuICAgIHZhciBoaWRkZW5LZXlzJDEgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcclxuXHJcbiAgICB2YXIgZiQzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdEtleXNJbnRlcm5hbChPLCBoaWRkZW5LZXlzJDEpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyA9IHtcclxuICAgICAgICBmOiBmJDNcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGYkNCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcblxyXG4gICAgdmFyIG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyA9IHtcclxuICAgICAgICBmOiBmJDRcclxuICAgIH07XHJcblxyXG4gICAgLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xyXG5cclxuXHJcbiAgICB2YXIgb3duS2V5cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcclxuICAgICAgICB2YXIga2V5cyA9IG9iamVjdEdldE93blByb3BlcnR5TmFtZXMuZihhbk9iamVjdChpdCkpO1xyXG4gICAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZjtcclxuICAgICAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xyXG4gICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IG9iamVjdERlZmluZVByb3BlcnR5LmY7XHJcbiAgICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcclxuXHJcbiAgICB2YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWUgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZSA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbikgOiAhIWRldGVjdGlvbjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcclxuICAgIHZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XHJcbiAgICB2YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcclxuICAgIHZhciBpc0ZvcmNlZF8xID0gaXNGb3JjZWQ7XHJcblxyXG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciQxID0gb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmY7XHJcblxyXG4gICAgLypcclxuXHQgIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XHJcblx0ICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XHJcblx0ICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxyXG5cdCAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcclxuXHQgIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxyXG5cdCAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcclxuXHQgIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxyXG5cdCAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxyXG5cdCAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxyXG5cdCAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcclxuXHQgIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxyXG5cdCAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcclxuXHQqL1xyXG5cclxuICAgIHZhciBfZXhwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xyXG4gICAgICAgIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcclxuICAgICAgICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XHJcbiAgICAgICAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcclxuICAgICAgICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xyXG5cclxuICAgICAgICBpZiAoR0xPQkFMKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IGdsb2JhbF8xO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoU1RBVElDKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IGdsb2JhbF8xW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IChnbG9iYWxfMVtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgICAgICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJDEodGFyZ2V0LCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xyXG5cclxuICAgICAgICAgICAgRk9SQ0VEID0gaXNGb3JjZWRfMShHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpOyAvLyBjb250YWluZWQgaW4gdGFyZ2V0XHJcblxyXG4gICAgICAgICAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xyXG4gICAgICAgICAgICB9IC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaGFtIHx8IHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcclxuICAgICAgICAgICAgfSAvLyBleHRlbmQgZ2xvYmFsXHJcblxyXG5cclxuICAgICAgICAgICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXHJcbiAgICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xyXG4gICAgICAgIHJldHVybiBvYmplY3RLZXlzSW50ZXJuYWwoTywgZW51bUJ1Z0tleXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxyXG5cclxuICAgIHZhciB0b09iamVjdCA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmF0aXZlQXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsgLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxyXG5cclxuICAgIHZhciBvYmplY3RBc3NpZ24gPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxyXG4gICAgICAgIGlmIChkZXNjcmlwdG9ycyAmJiBuYXRpdmVBc3NpZ24oe1xyXG4gICAgICAgICAgICBiOiAxXHJcbiAgICAgICAgfSwgbmF0aXZlQXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMyxcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KSwge1xyXG4gICAgICAgICAgICBiOiAyXHJcbiAgICAgICAgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlOyAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcclxuXHJcbiAgICAgICAgdmFyIEEgPSB7fTtcclxuICAgICAgICB2YXIgQiA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuXHJcbiAgICAgICAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpO1xyXG4gICAgICAgIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XHJcbiAgICAgICAgQVtzeW1ib2xdID0gNztcclxuICAgICAgICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7XHJcbiAgICAgICAgICAgIEJbY2hyXSA9IGNocjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmF0aXZlQXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cyhuYXRpdmVBc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcclxuICAgIH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgICAgIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcclxuICAgICAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgICAgICB2YXIgaW5kZXggPSAxO1xyXG4gICAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZjtcclxuICAgICAgICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm9wZXJ0eUlzRW51bWVyYWJsZS5mO1xyXG5cclxuICAgICAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIFMgPSBpbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XHJcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGogPSAwO1xyXG4gICAgICAgICAgICB2YXIga2V5O1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcclxuICAgICAgICAgICAgICAgIGtleSA9IGtleXNbaisrXTtcclxuICAgICAgICAgICAgICAgIGlmICghZGVzY3JpcHRvcnMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBUO1xyXG4gICAgfSA6IG5hdGl2ZUFzc2lnbjtcclxuXHJcbiAgICAvLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXHJcblxyXG4gICAgX2V4cG9ydCh7XHJcbiAgICAgICAgdGFyZ2V0OiAnT2JqZWN0JyxcclxuICAgICAgICBzdGF0OiB0cnVlLFxyXG4gICAgICAgIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gb2JqZWN0QXNzaWduXHJcbiAgICB9LCB7XHJcbiAgICAgICAgYXNzaWduOiBvYmplY3RBc3NpZ25cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXHJcbiAgICB2YXIgc3RyaW5nUmVwZWF0ID0gJycucmVwZWF0IHx8IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xyXG4gICAgICAgIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcclxuICAgICAgICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XHJcblxyXG4gICAgICAgIGZvciAoOyBuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzdWx0ICs9IHN0cjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICB2YXIgY2VpbCQxID0gTWF0aC5jZWlsOyAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxyXG5cclxuICAgIHZhciBjcmVhdGVNZXRob2QkMSA9IGZ1bmN0aW9uIChJU19FTkQpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcpIHtcclxuICAgICAgICAgICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xyXG4gICAgICAgICAgICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xyXG4gICAgICAgICAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcclxuICAgICAgICAgICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcclxuICAgICAgICAgICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XHJcbiAgICAgICAgICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XHJcbiAgICAgICAgICAgIHN0cmluZ0ZpbGxlciA9IHN0cmluZ1JlcGVhdC5jYWxsKGZpbGxTdHIsIGNlaWwkMShmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcclxuICAgICAgICAgICAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XHJcbiAgICAgICAgICAgIHJldHVybiBJU19FTkQgPyBTICsgc3RyaW5nRmlsbGVyIDogc3RyaW5nRmlsbGVyICsgUztcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc3RyaW5nUGFkID0ge1xyXG4gICAgICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcclxuICAgICAgICBzdGFydDogY3JlYXRlTWV0aG9kJDEoZmFsc2UpLFxyXG4gICAgICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXHJcbiAgICAgICAgZW5kOiBjcmVhdGVNZXRob2QkMSh0cnVlKVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXNlckFnZW50ID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleFxyXG5cclxuXHJcbiAgICB2YXIgd2Via2l0U3RyaW5nUGFkQnVnID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XHJcblxyXG4gICAgdmFyICRwYWRFbmQgPSBzdHJpbmdQYWQuZW5kO1xyXG5cclxuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXHJcblxyXG5cclxuICAgIF9leHBvcnQoe1xyXG4gICAgICAgIHRhcmdldDogJ1N0cmluZycsXHJcbiAgICAgICAgcHJvdG86IHRydWUsXHJcbiAgICAgICAgZm9yY2VkOiB3ZWJraXRTdHJpbmdQYWRCdWdcclxuICAgIH0sIHtcclxuICAgICAgICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGhcclxuICAgICAgICAgICAgLyogLCBmaWxsU3RyaW5nID0gJyAnICovXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcGFkRW5kKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciAkcGFkU3RhcnQgPSBzdHJpbmdQYWQuc3RhcnQ7XHJcblxyXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxyXG5cclxuXHJcbiAgICBfZXhwb3J0KHtcclxuICAgICAgICB0YXJnZXQ6ICdTdHJpbmcnLFxyXG4gICAgICAgIHByb3RvOiB0cnVlLFxyXG4gICAgICAgIGZvcmNlZDogd2Via2l0U3RyaW5nUGFkQnVnXHJcbiAgICB9LCB7XHJcbiAgICAgICAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aFxyXG4gICAgICAgICAgICAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi9cclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZFxyXG5cclxuXHJcbiAgICBfZXhwb3J0KHtcclxuICAgICAgICB0YXJnZXQ6ICdTdHJpbmcnLFxyXG4gICAgICAgIHByb3RvOiB0cnVlXHJcbiAgICB9LCB7XHJcbiAgICAgICAgcmVwZWF0OiBzdHJpbmdSZXBlYXRcclxuICAgIH0pO1xyXG5cclxuICAgIChmdW5jdGlvbiAoT2JqZWN0KSB7XHJcbiAgICAgICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICdvYmplY3QnICYmICh0aGlzID8gZ2V0KCkgOiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdfVF8nLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBnZXRcclxuICAgICAgICB9KSwgX1RfKSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxUaGlzID0gdGhpcztcclxuICAgICAgICAgICAgZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX1RfO1xyXG4gICAgICAgIH1cclxuICAgIH0pKE9iamVjdCk7XHJcblxyXG4gICAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcclxuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcclxuICAgICAgICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBfdHlwZW9mKG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcclxuICAgICAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcclxuICAgICAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XHJcbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoa2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcjoge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxyXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XHJcbiAgICAgICAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcclxuICAgICAgICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcclxuICAgICAgICAgICAgby5fX3Byb3RvX18gPSBwO1xyXG4gICAgICAgICAgICByZXR1cm4gbztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcclxuICAgICAgICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xyXG4gICAgICAgIHZhciBrZXksIGk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGtleSA9IHNvdXJjZUtleXNbaV07XHJcbiAgICAgICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XHJcblxyXG4gICAgICAgIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcclxuXHJcbiAgICAgICAgdmFyIGtleSwgaTtcclxuXHJcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcclxuICAgICAgICAgICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcclxuICAgICAgICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcclxuICAgICAgICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7XHJcbiAgICAgICAgICAgIF9nZXQgPSBSZWZsZWN0LmdldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWJhc2UpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRlc2MuZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXQkMSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5zZXQpIHtcclxuICAgICAgICAgICAgc2V0JDEgPSBSZWZsZWN0LnNldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXQkMSA9IGZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlc2M7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJhc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjLnNldC5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRlc2Mud3JpdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZWNlaXZlciwgcHJvcGVydHkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkZXNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXNjLndyaXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2MudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVjZWl2ZXIsIHByb3BlcnR5LCBkZXNjKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RlZmluZVByb3BlcnR5KHJlY2VpdmVyLCBwcm9wZXJ0eSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNldCQxKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3NldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIsIGlzU3RyaWN0KSB7XHJcbiAgICAgICAgdmFyIHMgPSBzZXQkMSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIHNldCBwcm9wZXJ0eScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xyXG4gICAgICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xyXG4gICAgICAgIGlmICghKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIF9hcnIgPSBbXTtcclxuICAgICAgICB2YXIgX24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBfZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgX2QgPSB0cnVlO1xyXG4gICAgICAgICAgICBfZSA9IGVycjtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xyXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIF9hcnI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ2hlY2tzIGlmIHZhbHVlIGlzIHN0cmluZyAqL1xyXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZztcclxuICAgIH1cclxuXHQvKipcclxuXHQgIERpcmVjdGlvblxyXG5cdCAgQHByb3Age3N0cmluZ30gTk9ORVxyXG5cdCAgQHByb3Age3N0cmluZ30gTEVGVFxyXG5cdCAgQHByb3Age3N0cmluZ30gRk9SQ0VfTEVGVFxyXG5cdCAgQHByb3Age3N0cmluZ30gUklHSFRcclxuXHQgIEBwcm9wIHtzdHJpbmd9IEZPUkNFX1JJR0hUXHJcblx0Ki9cclxuXHJcbiAgICB2YXIgRElSRUNUSU9OID0ge1xyXG4gICAgICAgIE5PTkU6ICdOT05FJyxcclxuICAgICAgICBMRUZUOiAnTEVGVCcsXHJcbiAgICAgICAgRk9SQ0VfTEVGVDogJ0ZPUkNFX0xFRlQnLFxyXG4gICAgICAgIFJJR0hUOiAnUklHSFQnLFxyXG4gICAgICAgIEZPUkNFX1JJR0hUOiAnRk9SQ0VfUklHSFQnXHJcbiAgICB9O1xyXG4gICAgLyoqICovXHJcblxyXG4gICAgZnVuY3Rpb24gZm9yY2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBESVJFQ1RJT04uRk9SQ0VfTEVGVDtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERJUkVDVElPTi5GT1JDRV9SSUdIVDtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBFc2NhcGVzIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb250cm9sIGNoYXJzICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFtcXF0vXFxcXF0pL2csICdcXFxcJDEnKTtcclxuICAgIH0gLy8gY2xvbmVkIGZyXHJcbiAgICBmdW5jdGlvbiBvYmplY3RJbmNsdWRlcyhiLCBhKSB7XHJcbiAgICAgICAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHZhciBhcnJBID0gQXJyYXkuaXNBcnJheShhKSxcclxuICAgICAgICAgICAgYXJyQiA9IEFycmF5LmlzQXJyYXkoYiksXHJcbiAgICAgICAgICAgIGk7XHJcblxyXG4gICAgICAgIGlmIChhcnJBICYmIGFyckIpIHtcclxuICAgICAgICAgICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvYmplY3RJbmNsdWRlcyhhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKGEgJiYgYiAmJiBfdHlwZW9mKGEpID09PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGIpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZUEgPSBhIGluc3RhbmNlb2YgRGF0ZSxcclxuICAgICAgICAgICAgICAgIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XHJcbiAgICAgICAgICAgIGlmIChkYXRlQSAmJiBkYXRlQikgcmV0dXJuIGEuZ2V0VGltZSgpID09IGIuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHJlZ2V4cEEgPSBhIGluc3RhbmNlb2YgUmVnRXhwLFxyXG4gICAgICAgICAgICAgICAgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XHJcbiAgICAgICAgICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYSk7IC8vIGlmIChrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghb2JqZWN0SW5jbHVkZXMoYltrZXlzW2ldXSwgYVtrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqIFNlbGVjdGlvbiByYW5nZSAqL1xyXG5cclxuICAgIC8qKiBQcm92aWRlcyBkZXRhaWxzIG9mIGNoYW5naW5nIGlucHV0ICovXHJcblxyXG4gICAgdmFyIEFjdGlvbkRldGFpbHMgPVxyXG4gICAgICAgIC8qI19fUFVSRV9fKi9cclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8qKiBDdXJyZW50IGlucHV0IHZhbHVlICovXHJcblxyXG4gICAgICAgICAgICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBPbGQgaW5wdXQgdmFsdWUgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBPbGQgc2VsZWN0aW9uICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFjdGlvbkRldGFpbHModmFsdWUsIGN1cnNvclBvcywgb2xkVmFsdWUsIG9sZFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFjdGlvbkRldGFpbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yUG9zID0gY3Vyc29yUG9zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbGRTZWxlY3Rpb24gPSBvbGRTZWxlY3Rpb247IC8vIGRvdWJsZSBjaGVjayBpZiBsZWZ0IHBhcnQgd2FzIGNoYW5nZWQgKGF1dG9maWxsaW5nLCBvdGhlciBub24tc3RhbmRhcmQgaW5wdXQgdHJpZ2dlcnMpXHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMudmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykgIT09IHRoaXMub2xkVmFsdWUuc2xpY2UoMCwgdGhpcy5zdGFydENoYW5nZVBvcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAtLXRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgIFN0YXJ0IGNoYW5naW5nIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICovXHJcblxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKEFjdGlvbkRldGFpbHMsIFt7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwic3RhcnRDaGFuZ2VQb3NcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLmN1cnNvclBvcywgdGhpcy5vbGRTZWxlY3Rpb24uc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEluc2VydGVkIHN5bWJvbHMgY291bnRcclxuICAgICAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImluc2VydGVkQ291bnRcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnNvclBvcyAtIHRoaXMuc3RhcnRDaGFuZ2VQb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgSW5zZXJ0ZWQgc3ltYm9sc1xyXG4gICAgICAgICAgICAgICAgICBAcmVhZG9ubHlcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiaW5zZXJ0ZWRcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLmluc2VydGVkQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIFJlbW92ZWQgc3ltYm9scyBjb3VudFxyXG4gICAgICAgICAgICAgICAgICBAcmVhZG9ubHlcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVtb3ZlZENvdW50XCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYXRoLm1heCBmb3Igb3Bwb3NpdGUgb3BlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMub2xkU2VsZWN0aW9uLmVuZCAtIHRoaXMuc3RhcnRDaGFuZ2VQb3MgfHwgLy8gZm9yIERlbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZFZhbHVlLmxlbmd0aCAtIHRoaXMudmFsdWUubGVuZ3RoLCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBSZW1vdmVkIHN5bWJvbHNcclxuICAgICAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlbW92ZWRcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9sZFZhbHVlLnN1YnN0cih0aGlzLnN0YXJ0Q2hhbmdlUG9zLCB0aGlzLnJlbW92ZWRDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgVW5jaGFuZ2VkIGhlYWQgc3ltYm9sc1xyXG4gICAgICAgICAgICAgICAgICBAcmVhZG9ubHlcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiaGVhZFwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKDAsIHRoaXMuc3RhcnRDaGFuZ2VQb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIFVuY2hhbmdlZCB0YWlsIHN5bWJvbHNcclxuICAgICAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInRhaWxcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlLnN1YnN0cmluZyh0aGlzLnN0YXJ0Q2hhbmdlUG9zICsgdGhpcy5pbnNlcnRlZENvdW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBSZW1vdmUgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgIEByZWFkb25seVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJyZW1vdmVEaXJlY3Rpb25cIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5yZW1vdmVkQ291bnQgfHwgdGhpcy5pbnNlcnRlZENvdW50KSByZXR1cm4gRElSRUNUSU9OLk5PTkU7IC8vIGFsaWduIHJpZ2h0IGlmIGRlbGV0ZSBhdCByaWdodCBvciBpZiByYW5nZSByZW1vdmVkIChldmVudCB3aXRoIGJhY2tzcGFjZSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2xkU2VsZWN0aW9uLmVuZCA9PT0gdGhpcy5jdXJzb3JQb3MgfHwgdGhpcy5vbGRTZWxlY3Rpb24uc3RhcnQgPT09IHRoaXMuY3Vyc29yUG9zID8gRElSRUNUSU9OLlJJR0hUIDogRElSRUNUSU9OLkxFRlQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBBY3Rpb25EZXRhaWxzO1xyXG4gICAgICAgIH0oKTtcclxuXHJcblx0LyoqXHJcblx0ICBQcm92aWRlcyBkZXRhaWxzIG9mIGNoYW5naW5nIG1vZGVsIHZhbHVlXHJcblx0ICBAcGFyYW0ge09iamVjdH0gW2RldGFpbHNdXHJcblx0ICBAcGFyYW0ge3N0cmluZ30gW2RldGFpbHMuaW5zZXJ0ZWRdIC0gSW5zZXJ0ZWQgc3ltYm9sc1xyXG5cdCAgQHBhcmFtIHtib29sZWFufSBbZGV0YWlscy5za2lwXSAtIENhbiBza2lwIGNoYXJzXHJcblx0ICBAcGFyYW0ge251bWJlcn0gW2RldGFpbHMucmVtb3ZlQ291bnRdIC0gUmVtb3ZlZCBzeW1ib2xzIGNvdW50XHJcblx0ICBAcGFyYW0ge251bWJlcn0gW2RldGFpbHMudGFpbFNoaWZ0XSAtIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsXHJcblx0Ki9cclxuICAgIHZhciBDaGFuZ2VEZXRhaWxzID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvKiogSW5zZXJ0ZWQgc3ltYm9scyAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIENhbiBza2lwIGNoYXJzICovXHJcblxyXG4gICAgICAgICAgICAvKiogQWRkaXRpb25hbCBvZmZzZXQgaWYgYW55IGNoYW5nZXMgb2NjdXJyZWQgYmVmb3JlIHRhaWwgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBSYXcgaW5zZXJ0ZWQgaXMgdXNlZCBieSBkeW5hbWljIG1hc2sgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ2hhbmdlRGV0YWlscyhkZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbmdlRGV0YWlscyk7XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhd0luc2VydGVkOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBza2lwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWlsU2hpZnQ6IDBcclxuICAgICAgICAgICAgICAgIH0sIGRldGFpbHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgIEFnZ3JlZ2F0ZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgQHJldHVybnMge0NoYW5nZURldGFpbHN9IGB0aGlzYFxyXG4gICAgICAgICAgICAqL1xyXG5cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhDaGFuZ2VEZXRhaWxzLCBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFnZ3JlZ2F0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFnZ3JlZ2F0ZShkZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYXdJbnNlcnRlZCArPSBkZXRhaWxzLnJhd0luc2VydGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpcCA9IHRoaXMuc2tpcCB8fCBkZXRhaWxzLnNraXA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRlZCArPSBkZXRhaWxzLmluc2VydGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFpbFNoaWZ0ICs9IGRldGFpbHMudGFpbFNoaWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFRvdGFsIG9mZnNldCBjb25zaWRlcmluZyBhbGwgY2hhbmdlcyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm9mZnNldFwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFpbFNoaWZ0ICsgdGhpcy5pbnNlcnRlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBDaGFuZ2VEZXRhaWxzO1xyXG4gICAgICAgIH0oKTtcclxuXHJcbiAgICAvKiogUHJvdmlkZXMgZGV0YWlscyBvZiBjb250aW51b3VzIGV4dHJhY3RlZCB0YWlsICovXHJcbiAgICB2YXIgQ29udGludW91c1RhaWxEZXRhaWxzID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvKiogVGFpbCB2YWx1ZSBhcyBzdHJpbmcgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBUYWlsIHN0YXJ0IHBvc2l0aW9uICovXHJcblxyXG4gICAgICAgICAgICAvKiogU3RhcnQgcG9zaXRpb24gKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ29udGludW91c1RhaWxEZXRhaWxzKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcclxuICAgICAgICAgICAgICAgIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0b3AgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGludW91c1RhaWxEZXRhaWxzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wID0gc3RvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKENvbnRpbnVvdXNUYWlsRGV0YWlscywgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJ0b1N0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZXh0ZW5kXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kKHRhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlICs9IFN0cmluZyh0YWlsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFwcGVuZFRvXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kVG8obWFza2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZC5hcHBlbmQodGhpcy50b1N0cmluZygpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhaWw6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KS5hZ2dyZWdhdGUobWFza2VkLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInNoaWZ0QmVmb3JlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnRCZWZvcmUocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJvbSA+PSBwb3MgfHwgIXRoaXMudmFsdWUubGVuZ3RoKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNoaWZ0Q2hhciA9IHRoaXMudmFsdWVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoaWZ0Q2hhcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogdGhpcy5mcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wOiB0aGlzLnN0b3BcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBDb250aW51b3VzVGFpbERldGFpbHM7XHJcbiAgICAgICAgfSgpO1xyXG5cclxuXHQvKipcclxuXHQgKiBBcHBsaWVzIG1hc2sgb24gZWxlbWVudC5cclxuXHQgKiBAY29uc3RydWN0b3JcclxuXHQgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR8SFRNTFRleHRBcmVhRWxlbWVudHxNYXNrRWxlbWVudH0gZWwgLSBFbGVtZW50IHRvIGFwcGx5IG1hc2tcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEN1c3RvbSBtYXNrIG9wdGlvbnNcclxuXHQgKiBAcmV0dXJuIHtJbnB1dE1hc2t9XHJcblx0ICovXHJcbiAgICBmdW5jdGlvbiBJTWFzayhlbCkge1xyXG4gICAgICAgIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcclxuICAgICAgICAvLyBjdXJyZW50bHkgYXZhaWxhYmxlIG9ubHkgZm9yIGlucHV0LWxpa2UgZWxlbWVudHNcclxuICAgICAgICByZXR1cm4gbmV3IElNYXNrLklucHV0TWFzayhlbCwgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFN1cHBvcnRlZCBtYXNrIHR5cGUgKi9cclxuXHJcbiAgICAvKiogUHJvdmlkZXMgY29tbW9uIG1hc2tpbmcgc3R1ZmYgKi9cclxuICAgIHZhciBNYXNrZWQgPVxyXG4gICAgICAgIC8qI19fUFVSRV9fKi9cclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vICRTaGFwZTxNYXNrZWRPcHRpb25zPjsgVE9ETyBhZnRlciBmXHJcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7TWFza30gKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXHJcblxyXG4gICAgICAgICAgICAvKiogVHJhbnNmb3JtcyB2YWx1ZSBiZWZvcmUgbWFzayBwcm9jZXNzaW5nICovXHJcblxyXG4gICAgICAgICAgICAvKiogVmFsaWRhdGVzIGlmIHZhbHVlIGlzIGFjY2VwdGFibGUgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBEb2VzIGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBGb3JtYXQgdHlwZWQgdmFsdWUgdG8gc3RyaW5nICovXHJcblxyXG4gICAgICAgICAgICAvKiogUGFyc2Ugc3RyZ2luIHRvIGdldCB0eXBlZCB2YWx1ZSAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIEVuYWJsZSBjaGFyYWN0ZXJzIG92ZXJ3cml0aW5nICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gTWFza2VkKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZC5ERUZBVUxUUywge30sIG9wdHMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXHJcblxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKE1hc2tlZCwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJ1cGRhdGVPcHRpb25zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhvcHRzKS5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpdGhWYWx1ZVJlZnJlc2godGhpcy5fdXBkYXRlLmJpbmQodGhpcywgb3B0cykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIFNldHMgbmV3IG9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgQHByb3RlY3RlZFxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBNYXNrIHN0YXRlICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVzZXRcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogUmVzZXRzIHZhbHVlICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlc29sdmVcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogUmVzb2x2ZSBuZXcgdmFsdWUgKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9Db21taXQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKiBGaW5kcyBuZWFyZXN0IGlucHV0IHBvc2l0aW9uIGluIGRpcmVjdGlvbiAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MsIGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3JQb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogRXh0cmFjdHMgdmFsdWUgaW4gcmFuZ2UgY29uc2lkZXJpbmcgZmxhZ3MgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZS5zbGljZShmcm9tUG9zLCB0b1Bvcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogRXh0cmFjdHMgdGFpbCBpbiByYW5nZSAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFRhaWwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcyksIGZyb21Qb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEFwcGVuZHMgdGFpbCAqL1xyXG4gICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFwcGVuZFRhaWxcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKHRhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcodGFpbCkpIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogQXBwZW5kcyBjaGFyICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLmRvUHJlcGFyZShjaCwgZmxhZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2gpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlICs9IGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkOiBjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3SW5zZXJ0ZWQ6IGNoXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogQXBwZW5kcyBjaGFyICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZENoYXJcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrVGFpbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25zaXN0ZW50U3RhdGUgPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IHRoaXMuX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnNpc3RlbnRUYWlsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kZWQgPSB0aGlzLmRvVmFsaWRhdGUoZmxhZ3MpICE9PSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcHBlbmRlZCAmJiBjaGVja1RhaWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsaWRhdGlvbiBvaywgY2hlY2sgdGFpbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3ZlcndyaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc2lzdGVudFRhaWwgPSBjaGVja1RhaWwuc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tUYWlsLnNoaWZ0QmVmb3JlKHRoaXMudmFsdWUubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFpbERldGFpbHMgPSB0aGlzLmFwcGVuZFRhaWwoY2hlY2tUYWlsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZGVkID0gdGFpbERldGFpbHMucmF3SW5zZXJ0ZWQgPT09IGNoZWNrVGFpbC50b1N0cmluZygpOyAvLyBpZiBvaywgcm9sbGJhY2sgc3RhdGUgYWZ0ZXIgdGFpbFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcHBlbmRlZCAmJiB0YWlsRGV0YWlscy5pbnNlcnRlZCkgdGhpcy5zdGF0ZSA9IGJlZm9yZVRhaWxTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyByZXZlcnQgYWxsIGlmIHNvbWV0aGluZyB3ZW50IHdyb25nXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcHBlbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gY29uc2lzdGVudFN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrVGFpbCAmJiBjb25zaXN0ZW50VGFpbCkgY2hlY2tUYWlsLnN0YXRlID0gY29uc2lzdGVudFRhaWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEFwcGVuZHMgb3B0aW9uYWwgcGxhY2Vob2xkZXIgYXQgZW5kICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZFBsYWNlaG9sZGVyXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEFwcGVuZHMgc3ltYm9scyBjb25zaWRlcmluZyBmbGFncyAqL1xyXG4gICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFwcGVuZFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChzdHIsIGZsYWdzLCB0YWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1N0cmluZyhzdHIpKSB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIHNob3VsZCBiZSBzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrVGFpbCA9IGlzU3RyaW5nKHRhaWwpID8gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpIDogdGFpbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MudGFpbCkgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBzdHIubGVuZ3RoOyArK2NpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuX2FwcGVuZENoYXIoc3RyW2NpXSwgZmxhZ3MsIGNoZWNrVGFpbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gLy8gYXBwZW5kIHRhaWwgYnV0IGFnZ3JlZ2F0ZSBvbmx5IHRhaWxTaGlmdFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrVGFpbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHMudGFpbFNoaWZ0ICs9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpLnRhaWxTaGlmdDsgLy8gVE9ETyBpdCdzIGEgZ29vZCBpZGVhIHRvIGNsZWFyIHN0YXRlIGFmdGVyIGFwcGVuZGluZyBlbmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBjYXVzZXMgYnVncyB3aGVuIG9uZSBhcHBlbmQgY2FsbHMgYW5vdGhlciAod2hlbiBkeW5hbWljIGRpc3BhdGNoIHNldCByYXdJbnB1dFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLl9yZXNldEJlZm9yZVRhaWxTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJyZW1vdmVcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLnZhbHVlLnNsaWNlKHRvUG9zKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBDYWxscyBmdW5jdGlvbiBhbmQgcmVhcHBsaWVzIGN1cnJlbnQgdmFsdWUgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ3aXRoVmFsdWVSZWZyZXNoXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd2l0aFZhbHVlUmVmcmVzaChmbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWZyZXNoaW5nIHx8ICF0aGlzLmlzSW5pdGlhbGl6ZWQpIHJldHVybiBmbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdJbnB1dCA9IHRoaXMucmF3SW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSBmbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF3SW5wdXRWYWx1ZSA9IHJhd0lucHV0OyAvLyBhcHBlbmQgbG9zdCB0cmFpbGluZyBjaGFycyBhdCBlbmRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHZhbHVlICYmIHZhbHVlLmluZGV4T2YodGhpcy5fdmFsdWUpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLnNsaWNlKHRoaXMuX3ZhbHVlLmxlbmd0aCksIHt9LCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVmcmVzaGluZztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicnVuSXNvbGF0ZWRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBydW5Jc29sYXRlZChmbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc29sYXRlZCB8fCAhdGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm4gZm4odGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNvbGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IGZuKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5faXNvbGF0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBQcmVwYXJlcyBzdHJpbmcgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZ1xyXG4gICAgICAgICAgICAgICAgICBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvUHJlcGFyZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvUHJlcGFyZShzdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXBhcmUgPyB0aGlzLnByZXBhcmUoc3RyLCB0aGlzLCBmbGFncykgOiBzdHI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgVmFsaWRhdGVzIGlmIHZhbHVlIGlzIGFjY2VwdGFibGVcclxuICAgICAgICAgICAgICAgICAgQHByb3RlY3RlZFxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZShmbGFncykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIXRoaXMudmFsaWRhdGUgfHwgdGhpcy52YWxpZGF0ZSh0aGlzLnZhbHVlLCB0aGlzLCBmbGFncykpICYmICghdGhpcy5wYXJlbnQgfHwgdGhpcy5wYXJlbnQuZG9WYWxpZGF0ZShmbGFncykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIERvZXMgYWRkaXRpb25hbCBwcm9jZXNzaW5nIGluIHRoZSBlbmQgb2YgZWRpdGluZ1xyXG4gICAgICAgICAgICAgICAgICBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvQ29tbWl0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9Db21taXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tbWl0KSB0aGlzLmNvbW1pdCh0aGlzLnZhbHVlLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvRm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9Gb3JtYXQodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPyB0aGlzLmZvcm1hdCh2YWx1ZSwgdGhpcykgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvUGFyc2VcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb1BhcnNlKHN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlID8gdGhpcy5wYXJzZShzdHIsIHRoaXMpIDogc3RyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwic3BsaWNlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCwgaW5zZXJ0ZWQsIHJlbW92ZURpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWlsUG9zID0gc3RhcnQgKyBkZWxldGVDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFpbCA9IHRoaXMuZXh0cmFjdFRhaWwodGFpbFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q2hhbmdlUG9zID0gdGhpcy5uZWFyZXN0SW5wdXRQb3Moc3RhcnQsIHJlbW92ZURpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZURldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhaWxTaGlmdDogc3RhcnRDaGFuZ2VQb3MgLSBzdGFydCAvLyBhZGp1c3QgdGFpbFNoaWZ0IGlmIHN0YXJ0IHdhcyBhbGlnbmVkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmFnZ3JlZ2F0ZSh0aGlzLnJlbW92ZShzdGFydENoYW5nZVBvcykpLmFnZ3JlZ2F0ZSh0aGlzLmFwcGVuZChpbnNlcnRlZCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRhaWwpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlRGV0YWlscztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmFsdWU6IHRoaXMudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBzdGF0ZS5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLCB7fSwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9Db21taXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInR5cGVkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvUGFyc2UodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5kb0Zvcm1hdCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogVmFsdWUgdGhhdCBpbmNsdWRlcyByYXcgdXNlciBpbnB1dCAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJhd0lucHV0VmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RJbnB1dCgwLCB0aGlzLnZhbHVlLmxlbmd0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYXc6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYXc6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9LCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb0NvbW1pdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXNrZWQ7XHJcbiAgICAgICAgfSgpO1xyXG4gICAgTWFza2VkLkRFRkFVTFRTID0ge1xyXG4gICAgICAgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uodikge1xyXG4gICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSU1hc2suTWFza2VkID0gTWFza2VkO1xyXG5cclxuICAgIC8qKiBHZXQgTWFza2VkIGNsYXNzIGJ5IG1hc2sgdHlwZSAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG1hc2tlZENsYXNzKG1hc2spIHtcclxuICAgICAgICBpZiAobWFzayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWFzayBwcm9wZXJ0eSBzaG91bGQgYmUgZGVmaW5lZCcpO1xyXG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVxyXG5cclxuXHJcbiAgICAgICAgaWYgKG1hc2sgaW5zdGFuY2VvZiBSZWdFeHApIHJldHVybiBJTWFzay5NYXNrZWRSZWdFeHA7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1hc2spKSByZXR1cm4gSU1hc2suTWFza2VkUGF0dGVybjsgLy8gJEZsb3dGaXhNZVxyXG5cclxuICAgICAgICBpZiAobWFzayBpbnN0YW5jZW9mIERhdGUgfHwgbWFzayA9PT0gRGF0ZSkgcmV0dXJuIElNYXNrLk1hc2tlZERhdGU7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgaWYgKG1hc2sgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdHlwZW9mIG1hc2sgPT09ICdudW1iZXInIHx8IG1hc2sgPT09IE51bWJlcikgcmV0dXJuIElNYXNrLk1hc2tlZE51bWJlcjsgLy8gJEZsb3dGaXhNZVxyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXNrKSB8fCBtYXNrID09PSBBcnJheSkgcmV0dXJuIElNYXNrLk1hc2tlZER5bmFtaWM7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgaWYgKElNYXNrLk1hc2tlZCAmJiBtYXNrLnByb3RvdHlwZSBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIG1hc2s7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgaWYgKG1hc2sgaW5zdGFuY2VvZiBGdW5jdGlvbikgcmV0dXJuIElNYXNrLk1hc2tlZEZ1bmN0aW9uO1xyXG4gICAgICAgIGNvbnNvbGUud2FybignTWFzayBub3QgZm91bmQgZm9yIG1hc2snLCBtYXNrKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXHJcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxyXG5cclxuICAgICAgICByZXR1cm4gSU1hc2suTWFza2VkO1xyXG4gICAgfVxyXG4gICAgLyoqIENyZWF0ZXMgbmV3IHtAbGluayBNYXNrZWR9IGRlcGVuZGluZyBvbiBtYXNrIHR5cGUgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVNYXNrKG9wdHMpIHtcclxuICAgICAgICAvLyAkRmxvd0ZpeE1lXHJcbiAgICAgICAgaWYgKElNYXNrLk1hc2tlZCAmJiBvcHRzIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gb3B0cztcclxuICAgICAgICBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XHJcbiAgICAgICAgdmFyIG1hc2sgPSBvcHRzLm1hc2s7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgaWYgKElNYXNrLk1hc2tlZCAmJiBtYXNrIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzaztcclxuICAgICAgICB2YXIgTWFza2VkQ2xhc3MgPSBtYXNrZWRDbGFzcyhtYXNrKTtcclxuICAgICAgICBpZiAoIU1hc2tlZENsYXNzKSB0aHJvdyBuZXcgRXJyb3IoJ01hc2tlZCBjbGFzcyBpcyBub3QgZm91bmQgZm9yIHByb3ZpZGVkIG1hc2ssIGFwcHJvcHJpYXRlIG1vZHVsZSBuZWVkcyB0byBiZSBpbXBvcnQgbWFudWFsbHkgYmVmb3JlIGNyZWF0aW5nIG1hc2suJyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXNrZWRDbGFzcyhvcHRzKTtcclxuICAgIH1cclxuICAgIElNYXNrLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xyXG5cclxuICAgIHZhciBERUZBVUxUX0lOUFVUX0RFRklOSVRJT05TID0ge1xyXG4gICAgICAgICcwJzogL1xcZC8sXHJcbiAgICAgICAgJ2EnOiAvW1xcdTAwNDEtXFx1MDA1QVxcdTAwNjEtXFx1MDA3QVxcdTAwQUFcXHUwMEI1XFx1MDBCQVxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyN1xcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMFxcdTA4QTItXFx1MDhBQ1xcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTc3XFx1MDk3OS1cXHUwOTdGXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzNcXHUwQzM1LVxcdTBDMzlcXHUwQzNEXFx1MEM1OFxcdTBDNTlcXHUwQzYwXFx1MEM2MVxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ2MFxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y0XFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFDXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlDMS1cXHUxOUM3XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkNDXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OTdcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3OEVcXHVBNzkwLVxcdUE3OTNcXHVBN0EwLVxcdUE3QUFcXHVBN0Y4LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTgwLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ10vLFxyXG4gICAgICAgICcqJzogLy4vXHJcbiAgICB9O1xyXG4gICAgLyoqICovXHJcblxyXG4gICAgdmFyIFBhdHRlcm5JbnB1dERlZmluaXRpb24gPVxyXG4gICAgICAgIC8qI19fUFVSRV9fKi9cclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gUGF0dGVybklucHV0RGVmaW5pdGlvbihvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0dGVybklucHV0RGVmaW5pdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBvcHRzLm1hc2ssXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tPcHRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdHMsIFtcIm1hc2tcIl0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubWFza2VkID0gY3JlYXRlTWFzayh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFzazogbWFza1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGJsb2NrT3B0cyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhQYXR0ZXJuSW5wdXREZWZpbml0aW9uLCBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlc2V0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tlZC5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tUG9zID09PSAwICYmIHRvUG9zID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNGaWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnJlbW92ZShmcm9tUG9zLCB0b1Bvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hcHBlbmRDaGFyXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXIoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNGaWxsZWQpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMubWFza2VkLnN0YXRlOyAvLyBzaW11bGF0ZSBpbnB1dFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IHRoaXMubWFza2VkLl9hcHBlbmRDaGFyKHN0ciwgZmxhZ3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlscy5pbnNlcnRlZCAmJiB0aGlzLmRvVmFsaWRhdGUoZmxhZ3MpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmluc2VydGVkID0gZGV0YWlscy5yYXdJbnNlcnRlZCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tlZC5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXRhaWxzLmluc2VydGVkICYmICF0aGlzLmlzT3B0aW9uYWwgJiYgIXRoaXMubGF6eSAmJiAhZmxhZ3MuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IHRoaXMucGxhY2Vob2xkZXJDaGFyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5za2lwID0gIWRldGFpbHMuaW5zZXJ0ZWQgJiYgIXRoaXMuaXNPcHRpb25hbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0ZpbGxlZCA9IEJvb2xlYW4oZGV0YWlscy5pbnNlcnRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJhcHBlbmRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJG1hc2tlZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQgPSB0aGlzLm1hc2tlZCkuYXBwZW5kLmFwcGx5KF90aGlzJG1hc2tlZCwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzRmlsbGVkIHx8IHRoaXMuaXNPcHRpb25hbCkgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNGaWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLnBsYWNlaG9sZGVyQ2hhcjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGV0YWlscztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFRhaWwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJG1hc2tlZDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX3RoaXMkbWFza2VkMiA9IHRoaXMubWFza2VkKS5leHRyYWN0VGFpbC5hcHBseShfdGhpcyRtYXNrZWQyLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiYXBwZW5kVGFpbFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRhaWwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJG1hc2tlZDM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX3RoaXMkbWFza2VkMyA9IHRoaXMubWFza2VkKS5hcHBlbmRUYWlsLmFwcGx5KF90aGlzJG1hc2tlZDMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrZWQuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogRElSRUNUSU9OLk5PTkU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pblBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heFBvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZFBvcyA9IE1hdGgubWluKE1hdGgubWF4KGN1cnNvclBvcywgbWluUG9zKSwgbWF4UG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfTEVGVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBib3VuZFBvcyA6IG1pblBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBib3VuZFBvcyA6IG1heFBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJG1hc2tlZDQsIF90aGlzJHBhcmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfdGhpcyRtYXNrZWQ0ID0gdGhpcy5tYXNrZWQpLmRvVmFsaWRhdGUuYXBwbHkoX3RoaXMkbWFza2VkNCwgYXJndW1lbnRzKSAmJiAoIXRoaXMucGFyZW50IHx8IChfdGhpcyRwYXJlbnQgPSB0aGlzLnBhcmVudCkuZG9WYWxpZGF0ZS5hcHBseShfdGhpcyRwYXJlbnQsIGFyZ3VtZW50cykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9Db21taXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb0NvbW1pdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tlZC5kb0NvbW1pdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hc2tlZC52YWx1ZSB8fCAodGhpcy5faXNGaWxsZWQgJiYgIXRoaXMuaXNPcHRpb25hbCA/IHRoaXMucGxhY2Vob2xkZXJDaGFyIDogJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLm1hc2tlZC52YWx1ZSkgfHwgdGhpcy5pc09wdGlvbmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwic3RhdGVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tlZDogdGhpcy5tYXNrZWQuc3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pc0ZpbGxlZDogdGhpcy5faXNGaWxsZWRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZS5tYXNrZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNGaWxsZWQgPSBzdGF0ZS5faXNGaWxsZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xyXG4gICAgICAgIH0oKTtcclxuXHJcbiAgICB2YXIgUGF0dGVybkZpeGVkRGVmaW5pdGlvbiA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgLyoqICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBhdHRlcm5GaXhlZERlZmluaXRpb24ob3B0cykge1xyXG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdHRlcm5GaXhlZERlZmluaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoUGF0dGVybkZpeGVkRGVmaW5pdGlvbiwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJyZXNldFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzUmF3SW5wdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5fdmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5fdmFsdWUuc2xpY2UoMCwgZnJvbVBvcykgKyB0aGlzLl92YWx1ZS5zbGljZSh0b1Bvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92YWx1ZSkgdGhpcy5faXNSYXdJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKGN1cnNvclBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IERJUkVDVElPTi5OT05FO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW5Qb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhQb3MgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX0xFRlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWluUG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uTk9ORTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heFBvcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLl92YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxhZ3MucmF3ICYmIHRoaXMuX2lzUmF3SW5wdXQgJiYgdGhpcy5fdmFsdWUuc2xpY2UoZnJvbVBvcywgdG9Qb3MpIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZENoYXJcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhcihzdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmFsdWUpIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcHBlbmRlZCA9IHRoaXMuY2hhciA9PT0gc3RyWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1Jlc29sdmVkID0gYXBwZW5kZWQgJiYgKHRoaXMuaXNVbm1hc2tpbmcgfHwgZmxhZ3MuaW5wdXQgfHwgZmxhZ3MucmF3KSAmJiAhZmxhZ3MudGFpbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZXNvbHZlZCkgZGV0YWlscy5yYXdJbnNlcnRlZCA9IHRoaXMuY2hhcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNSYXdJbnB1dCA9IGlzUmVzb2x2ZWQgJiYgKGZsYWdzLnJhdyB8fCBmbGFncy5pbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfYXBwZW5kUGxhY2Vob2xkZXJcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kUGxhY2Vob2xkZXIoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZSkgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5jaGFyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZXh0cmFjdFRhaWxcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0VGFpbCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKCcnKTtcclxuICAgICAgICAgICAgICAgIH0gLy8gJEZsb3dGaXhNZSBubyBpZGVhc1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFwcGVuZFRhaWxcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKHRhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcodGFpbCkpIHRhaWwgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8odGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJhcHBlbmRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoc3RyLCBmbGFncywgdGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwZW5kQ2hhcihzdHIsIGZsYWdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhaWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmFwcGVuZFRhaWwodGFpbCkudGFpbFNoaWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkb0NvbW1pdFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkgeyB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNVbm1hc2tpbmcgPyB0aGlzLnZhbHVlIDogJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmFsdWU6IHRoaXMuX3ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaXNSYXdJbnB1dDogdGhpcy5faXNSYXdJbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFBhdHRlcm5GaXhlZERlZmluaXRpb247XHJcbiAgICAgICAgfSgpO1xyXG5cclxuICAgIHZhciBDaHVua3NUYWlsRGV0YWlscyA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLyoqICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIENodW5rc1RhaWxEZXRhaWxzKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNodW5rcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcclxuXHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2h1bmtzVGFpbERldGFpbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzID0gY2h1bmtzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKENodW5rc1RhaWxEZXRhaWxzLCBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInRvU3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2h1bmtzLm1hcChTdHJpbmcpLmpvaW4oJycpO1xyXG4gICAgICAgICAgICAgICAgfSAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZXh0ZW5kXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kKHRhaWxDaHVuaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghU3RyaW5nKHRhaWxDaHVuaykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcodGFpbENodW5rKSkgdGFpbENodW5rID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbENodW5rKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RDaHVuayA9IHRoaXMuY2h1bmtzW3RoaXMuY2h1bmtzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHRlbmRMYXN0ID0gbGFzdENodW5rICYmICggLy8gaWYgc3RvcHMgYXJlIHNhbWUgb3IgdGFpbCBoYXMgbm8gc3RvcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q2h1bmsuc3RvcCA9PT0gdGFpbENodW5rLnN0b3AgfHwgdGFpbENodW5rLnN0b3AgPT0gbnVsbCkgJiYgLy8gaWYgdGFpbCBjaHVuayBnb2VzIGp1c3QgYWZ0ZXIgbGFzdCBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWlsQ2h1bmsuZnJvbSA9PT0gbGFzdENodW5rLmZyb20gKyBsYXN0Q2h1bmsudG9TdHJpbmcoKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDb250aW51b3VzVGFpbERldGFpbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhlIGFiaWxpdHkgdG8gZXh0ZW5kIHByZXZpb3VzIGNodW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbmRMYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRlbmQgcHJldmlvdXMgY2h1bmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDaHVuay5leHRlbmQodGFpbENodW5rLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIG5ldyBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh0YWlsQ2h1bmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFpbENodW5rLnN0b3AgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW53cmFwIGZsb2F0aW5nIGNodW5rcyB0byBwYXJlbnQsIGtlZXBpbmcgYGZyb21gIHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0VGFpbENodW5rO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0YWlsQ2h1bmsuY2h1bmtzLmxlbmd0aCAmJiB0YWlsQ2h1bmsuY2h1bmtzWzBdLnN0b3AgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFpbENodW5rID0gdGFpbENodW5rLmNodW5rcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFpbENodW5rLmZyb20gKz0gdGFpbENodW5rLmZyb207XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlbmQoZmlyc3RUYWlsQ2h1bmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vIGlmIHRhaWwgY2h1bmsgc3RpbGwgaGFzIHZhbHVlXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhaWxDaHVuay50b1N0cmluZygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjaHVua3MgY29udGFpbnMgc3RvcHMsIHRoZW4gcG9wdXAgc3RvcCB0byBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhaWxDaHVuay5zdG9wID0gdGFpbENodW5rLmJsb2NrSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHRhaWxDaHVuayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJhcHBlbmRUb1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZFRvKG1hc2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtYXNrZWQgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWRQYXR0ZXJuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHModGhpcy50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8obWFza2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgY2kgPSAwOyBjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aCAmJiAhZGV0YWlscy5za2lwOyArK2NpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IHRoaXMuY2h1bmtzW2NpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0QmxvY2tJdGVyID0gbWFza2VkLl9tYXBQb3NUb0Jsb2NrKG1hc2tlZC52YWx1ZS5sZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3AgPSBjaHVuay5zdG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmtCbG9jayA9IHZvaWQgMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wICYmICggLy8gaWYgYmxvY2sgbm90IGZvdW5kIG9yIHN0b3AgaXMgYmVoaW5kIGxhc3RCbG9ja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWxhc3RCbG9ja0l0ZXIgfHwgbGFzdEJsb2NrSXRlci5pbmRleCA8PSBzdG9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgfHwgLy8gZm9yIGNvbnRpbnVvdXMgYmxvY2sgYWxzbyBjaGVjayBpZiBzdG9wIGlzIGV4aXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkLl9zdG9wcy5pbmRleE9mKHN0b3ApID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuX2FwcGVuZFBsYWNlaG9sZGVyKHN0b3ApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua0Jsb2NrID0gY2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscyAmJiBtYXNrZWQuX2Jsb2Nrc1tzdG9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWlsRGV0YWlscyA9IGNodW5rQmxvY2suYXBwZW5kVGFpbChjaHVuayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWlsRGV0YWlscy5za2lwID0gZmFsc2U7IC8vIGFsd2F5cyBpZ25vcmUgc2tpcCwgaXQgd2lsbCBiZSBzZXQgb24gbGFzdFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRhaWxEZXRhaWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tlZC5fdmFsdWUgKz0gdGFpbERldGFpbHMuaW5zZXJ0ZWQ7IC8vIGdldCBub3QgaW5zZXJ0ZWQgY2hhcnNcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtYWluQ2hhcnMgPSBjaHVuay50b1N0cmluZygpLnNsaWNlKHRhaWxEZXRhaWxzLnJhd0luc2VydGVkLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluQ2hhcnMpIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5hcHBlbmQocmVtYWluQ2hhcnMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWlsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuYXBwZW5kKGNodW5rLnRvU3RyaW5nKCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWlsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJzaGlmdEJlZm9yZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNoaWZ0QmVmb3JlKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyb20gPj0gcG9zIHx8ICF0aGlzLmNodW5rcy5sZW5ndGgpIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmtTaGlmdFBvcyA9IHBvcyAtIHRoaXMuZnJvbTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2kgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2kgPCB0aGlzLmNodW5rcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rID0gdGhpcy5jaHVua3NbY2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hpZnRDaGFyID0gY2h1bmsuc2hpZnRCZWZvcmUoY2h1bmtTaGlmdFBvcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsudG9TdHJpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2h1bmsgc3RpbGwgY29udGFpbnMgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBub3Qgc2hpZnRlZCAtIG1lYW5zIG5vIG1vcmUgYXZhaWxhYmxlIGNoYXJzIHRvIHNoaWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoaWZ0Q2hhcikgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2NpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gaWYgY2h1bmsgaGFzIG5vIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNodW5rcy5zcGxpY2UoY2ksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnRDaGFyKSByZXR1cm4gc2hpZnRDaGFyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwic3RhdGVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rczogdGhpcy5jaHVua3MubWFwKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcDogdGhpcy5zdG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja0luZGV4OiB0aGlzLmJsb2NrSW5kZXhcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rcyA9IHN0YXRlLmNodW5rcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIFtcImNodW5rc1wiXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2h1bmtzID0gY2h1bmtzLm1hcChmdW5jdGlvbiAoY3N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IFwiY2h1bmtzXCIgaW4gY3N0YXRlID8gbmV3IENodW5rc1RhaWxEZXRhaWxzKCkgOiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKCk7IC8vICRGbG93Rml4TWUgYWxyZWFkeSBjaGVja2VkIGFib3ZlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5zdGF0ZSA9IGNzdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gQ2h1bmtzVGFpbERldGFpbHM7XHJcbiAgICAgICAgfSgpO1xyXG5cclxuXHQvKipcclxuXHQgIFBhdHRlcm4gbWFza1xyXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuXHQgIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmJsb2Nrc1xyXG5cdCAgQHBhcmFtIHtPYmplY3R9IG9wdHMuZGVmaW5pdGlvbnNcclxuXHQgIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxyXG5cdCAgQHBhcmFtIHtib29sZWFufSBvcHRzLmxhenlcclxuXHQqL1xyXG4gICAgdmFyIE1hc2tlZFBhdHRlcm4gPVxyXG4gICAgICAgIC8qI19fUFVSRV9fKi9cclxuICAgICAgICBmdW5jdGlvbiAoX01hc2tlZCkge1xyXG4gICAgICAgICAgICBfaW5oZXJpdHMoTWFza2VkUGF0dGVybiwgX01hc2tlZCk7XHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIFNpbmdsZSBjaGFyIGZvciBlbXB0eSBpbnB1dCAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIFNob3cgcGxhY2Vob2xkZXIgb25seSB3aGVuIG5lZWRlZCAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWRQYXR0ZXJuKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRQYXR0ZXJuKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIHR5cGUgJFNoYXBlPE1hc2tlZFBhdHRlcm5PcHRpb25zPj17fSBkb2VzIG5vdCB3b3JrXHJcbiAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9JTlBVVF9ERUZJTklUSU9OUywgb3B0cy5kZWZpbml0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4pLmNhbGwodGhpcywgT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkUGF0dGVybi5ERUZBVUxUUywge30sIG9wdHMpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICAgICAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoTWFza2VkUGF0dGVybiwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmaW5pdGlvbnMsIG9wdHMuZGVmaW5pdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWJ1aWxkTWFzaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3JlYnVpbGRNYXNrXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYnVpbGRNYXNrKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZzID0gdGhpcy5kZWZpbml0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibG9ja3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hc2tlZEJsb2NrcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gdGhpcy5tYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF0dGVybiB8fCAhZGVmcykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bm1hc2tpbmdCbG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25hbEJsb2NrID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ibG9ja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcGF0dGVybi5zbGljZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYk5hbWVzID0gT2JqZWN0LmtleXMoX3RoaXMuYmxvY2tzKS5maWx0ZXIoZnVuY3Rpb24gKGJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmluZGV4T2YoYk5hbWUpID09PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyBvcmRlciBieSBrZXkgbGVuZ3RoXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJOYW1lcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyB1c2UgYmxvY2sgbmFtZSB3aXRoIG1heCBsZW5ndGhcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJOYW1lID0gYk5hbWVzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYk5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tlZEJsb2NrID0gY3JlYXRlTWFzayhPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogX3RoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5OiBfdGhpcy5sYXp5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDaGFyOiBfdGhpcy5wbGFjZWhvbGRlckNoYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdGU6IF90aGlzLm92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBfdGhpcy5ibG9ja3NbYk5hbWVdKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza2VkQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9ibG9ja3MucHVzaChtYXNrZWRCbG9jayk7IC8vIHN0b3JlIGJsb2NrIGluZGV4XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0pIF90aGlzLl9tYXNrZWRCbG9ja3NbYk5hbWVdID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0ucHVzaChfdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICs9IGJOYW1lLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhciA9IHBhdHRlcm5baV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2lzSW5wdXQgPSBjaGFyIGluIGRlZnM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gTWFza2VkUGF0dGVybi5TVE9QX0NIQVIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BzLnB1c2godGhpcy5fYmxvY2tzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAneycgfHwgY2hhciA9PT0gJ30nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hc2tpbmdCbG9jayA9ICF1bm1hc2tpbmdCbG9jaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1snIHx8IGNoYXIgPT09ICddJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxCbG9jayA9ICFvcHRpb25hbEJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSBNYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyID0gcGF0dGVybltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hhcikgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXNJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmID0gX2lzSW5wdXQgPyBuZXcgUGF0dGVybklucHV0RGVmaW5pdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5OiB0aGlzLmxhenksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlckNoYXI6IHRoaXMucGxhY2Vob2xkZXJDaGFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogZGVmc1tjaGFyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3B0aW9uYWw6IG9wdGlvbmFsQmxvY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBuZXcgUGF0dGVybkZpeGVkRGVmaW5pdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyOiBjaGFyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNVbm1hc2tpbmc6IHVubWFza2luZ0Jsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxvY2tzLnB1c2goZGVmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlc2V0XCIsXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwicmVzZXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9Db21taXRcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiLmRvQ29tbWl0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJkb0NvbW1pdFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJhcHBlbmRUYWlsXCIsXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRUYWlsKHRhaWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcImFwcGVuZFRhaWxcIiwgdGhpcykuY2FsbCh0aGlzLCB0YWlsKS5hZ2dyZWdhdGUodGhpcy5fYXBwZW5kUGxhY2Vob2xkZXIoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hcHBlbmRDaGFyUmF3XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXJSYXcoY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5kb1ByZXBhcmUoY2gsIGZsYWdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2sodGhpcy52YWx1ZS5sZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFibG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBiaSA9IGJsb2NrSXRlci5pbmRleDsgOyArK2JpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ibG9jaykgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tEZXRhaWxzID0gX2Jsb2NrLl9hcHBlbmRDaGFyKGNoLCBmbGFncyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IGJsb2NrRGV0YWlscy5za2lwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShibG9ja0RldGFpbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcCB8fCBibG9ja0RldGFpbHMucmF3SW5zZXJ0ZWQpIGJyZWFrOyAvLyBnbyBuZXh0IGNoYXJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0VGFpbFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RUYWlsKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHVua1RhaWwgPSBuZXcgQ2h1bmtzVGFpbERldGFpbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbVBvcyA9PT0gdG9Qb3MpIHJldHVybiBjaHVua1RhaWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgYmksIGJGcm9tUG9zLCBiVG9Qb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrQ2h1bmsgPSBiLmV4dHJhY3RUYWlsKGJGcm9tUG9zLCBiVG9Qb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja0NodW5rLnN0b3AgPSBfdGhpczIuX2ZpbmRTdG9wQmVmb3JlKGJpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tDaHVuay5mcm9tID0gX3RoaXMyLl9ibG9ja1N0YXJ0UG9zKGJpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrQ2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscykgYmxvY2tDaHVuay5ibG9ja0luZGV4ID0gYmk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rVGFpbC5leHRlbmQoYmxvY2tDaHVuayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaHVua1RhaWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImV4dHJhY3RJbnB1dFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21Qb3MgPT09IHRvUG9zKSByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hCbG9ja3NJblJhbmdlKGZyb21Qb3MsIHRvUG9zLCBmdW5jdGlvbiAoYiwgXywgZnJvbVBvcywgdG9Qb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgKz0gYi5leHRyYWN0SW5wdXQoZnJvbVBvcywgdG9Qb3MsIGZsYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2ZpbmRTdG9wQmVmb3JlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmRTdG9wQmVmb3JlKGJsb2NrSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcEJlZm9yZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2kgPSAwOyBzaSA8IHRoaXMuX3N0b3BzLmxlbmd0aDsgKytzaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcCA9IHRoaXMuX3N0b3BzW3NpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3AgPD0gYmxvY2tJbmRleCkgc3RvcEJlZm9yZSA9IHN0b3A7IGVsc2UgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcEJlZm9yZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBBcHBlbmRzIHBsYWNlaG9sZGVyIGRlcGVuZGluZyBvbiBsYXppbmVzcyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hcHBlbmRQbGFjZWhvbGRlclwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hcHBlbmRQbGFjZWhvbGRlcih0b0Jsb2NrSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhenkgJiYgdG9CbG9ja0luZGV4ID09IG51bGwpIHJldHVybiBkZXRhaWxzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRCbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRoaXMudmFsdWUubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFydEJsb2NrSXRlcikgcmV0dXJuIGRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0QmxvY2tJbmRleCA9IHN0YXJ0QmxvY2tJdGVyLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRCbG9ja0luZGV4ID0gdG9CbG9ja0luZGV4ICE9IG51bGwgPyB0b0Jsb2NrSW5kZXggOiB0aGlzLl9ibG9ja3MubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibG9ja3Muc2xpY2Uoc3RhcnRCbG9ja0luZGV4LCBlbmRCbG9ja0luZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYi5sYXp5IHx8IHRvQmxvY2tJbmRleCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIGBfYmxvY2tzYCBtYXkgbm90IGJlIHByZXNlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYi5fYmxvY2tzICE9IG51bGwgPyBbYi5fYmxvY2tzLmxlbmd0aF0gOiBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYkRldGFpbHMgPSBiLl9hcHBlbmRQbGFjZWhvbGRlci5hcHBseShiLCBhcmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMuX3ZhbHVlICs9IGJEZXRhaWxzLmluc2VydGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5hZ2dyZWdhdGUoYkRldGFpbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEZpbmRzIGJsb2NrIGluIHBvcyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9tYXBQb3NUb0Jsb2NrXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX21hcFBvc1RvQmxvY2socG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjY1ZhbCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBiaSA9IDA7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrMiA9IHRoaXMuX2Jsb2Nrc1tiaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9ja1N0YXJ0UG9zID0gYWNjVmFsLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjVmFsICs9IF9ibG9jazIudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIDw9IGFjY1ZhbC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGJpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogcG9zIC0gYmxvY2tTdGFydFBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9ibG9ja1N0YXJ0UG9zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Jsb2NrU3RhcnRQb3MoYmxvY2tJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja3Muc2xpY2UoMCwgYmxvY2tJbmRleCkucmVkdWNlKGZ1bmN0aW9uIChwb3MsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcyArPSBiLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9mb3JFYWNoQmxvY2tzSW5SYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21CbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKGZyb21Qb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbUJsb2NrSXRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9CbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRvUG9zKTsgLy8gcHJvY2VzcyBmaXJzdCBibG9ja1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1NhbWVCbG9jayA9IHRvQmxvY2tJdGVyICYmIGZyb21CbG9ja0l0ZXIuaW5kZXggPT09IHRvQmxvY2tJdGVyLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbUJsb2NrU3RhcnRQb3MgPSBmcm9tQmxvY2tJdGVyLm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21CbG9ja0VuZFBvcyA9IHRvQmxvY2tJdGVyICYmIGlzU2FtZUJsb2NrID8gdG9CbG9ja0l0ZXIub2Zmc2V0IDogdGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4odGhpcy5fYmxvY2tzW2Zyb21CbG9ja0l0ZXIuaW5kZXhdLCBmcm9tQmxvY2tJdGVyLmluZGV4LCBmcm9tQmxvY2tTdGFydFBvcywgZnJvbUJsb2NrRW5kUG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b0Jsb2NrSXRlciAmJiAhaXNTYW1lQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2Nlc3MgaW50ZXJtZWRpYXRlIGJsb2Nrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYmkgPSBmcm9tQmxvY2tJdGVyLmluZGV4ICsgMTsgYmkgPCB0b0Jsb2NrSXRlci5pbmRleDsgKytiaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1tiaV0sIGJpLCAwLCB0aGlzLl9ibG9ja3NbYmldLnZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vIHByb2Nlc3MgbGFzdCBibG9ja1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbih0aGlzLl9ibG9ja3NbdG9CbG9ja0l0ZXIuaW5kZXhdLCB0b0Jsb2NrSXRlci5pbmRleCwgMCwgdG9CbG9ja0l0ZXIub2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b1BvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy52YWx1ZS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVEZXRhaWxzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInJlbW92ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGZyb21Qb3MsIHRvUG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIGZ1bmN0aW9uIChiLCBfLCBiRnJvbVBvcywgYlRvUG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZURldGFpbHMuYWdncmVnYXRlKGIucmVtb3ZlKGJGcm9tUG9zLCBiVG9Qb3MpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZURldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm5lYXJlc3RJbnB1dFBvc1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5lYXJlc3RJbnB1dFBvcyhjdXJzb3JQb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBESVJFQ1RJT04uTk9ORTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHJlZmFjdG9yIC0gZXh0cmFjdCBhbGlnbmJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZ2luQmxvY2tEYXRhID0gdGhpcy5fbWFwUG9zVG9CbG9jayhjdXJzb3JQb3MpIHx8IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogMFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZ2luQmxvY2tPZmZzZXQgPSBiZWdpbkJsb2NrRGF0YS5vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luQmxvY2tJbmRleCA9IGJlZ2luQmxvY2tEYXRhLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZWdpbkJsb2NrID0gdGhpcy5fYmxvY2tzW2JlZ2luQmxvY2tJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiZWdpbkJsb2NrKSByZXR1cm4gY3Vyc29yUG9zO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZWdpbkJsb2NrQ3Vyc29yUG9zID0gYmVnaW5CbG9ja09mZnNldDsgLy8gaWYgcG9zaXRpb24gaW5zaWRlIGJsb2NrIC0gdHJ5IHRvIGFkanVzdCBpdFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW5CbG9ja0N1cnNvclBvcyAhPT0gMCAmJiBiZWdpbkJsb2NrQ3Vyc29yUG9zIDwgYmVnaW5CbG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5CbG9ja0N1cnNvclBvcyA9IGJlZ2luQmxvY2submVhcmVzdElucHV0UG9zKGJlZ2luQmxvY2tPZmZzZXQsIGZvcmNlRGlyZWN0aW9uKGRpcmVjdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnNvckF0UmlnaHQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSBiZWdpbkJsb2NrLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yQXRMZWZ0ID0gYmVnaW5CbG9ja0N1cnNvclBvcyA9PT0gMDsgLy8gIGN1cnNvciBpcyBJTlNJREUgZmlyc3QgYmxvY2sgKG5vdCBhdCBib3VuZHMpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY3Vyc29yQXRMZWZ0ICYmICFjdXJzb3JBdFJpZ2h0KSByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhiZWdpbkJsb2NrSW5kZXgpICsgYmVnaW5CbG9ja0N1cnNvclBvcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoQmxvY2tJbmRleCA9IGN1cnNvckF0UmlnaHQgPyBiZWdpbkJsb2NrSW5kZXggKyAxIDogYmVnaW5CbG9ja0luZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTk9ORSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT05FIGRpcmVjdGlvbiB1c2VkIHRvIGNhbGN1bGF0ZSBzdGFydCBpbnB1dCBwb3NpdGlvbiBpZiBubyBjaGFycyB3ZXJlIHJlbW92ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRk9SIE5PTkU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5wdXR8YW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBhbnl8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIGZpbGxlZC1pbnB1dHxhbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZmlyc3QgYmxvY2sgYXQgbGVmdCBpcyBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQmxvY2tJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9ja0luZGV4QXRMZWZ0ID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tBdExlZnQgPSB0aGlzLl9ibG9ja3NbYmxvY2tJbmRleEF0TGVmdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tJbnB1dFBvcyA9IGJsb2NrQXRMZWZ0Lm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSk7IC8vIGlzIGlucHV0XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFibG9ja0F0TGVmdC52YWx1ZS5sZW5ndGggfHwgYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdExlZnQudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3Moc2VhcmNoQmxvY2tJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gLT5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RJbnB1dEF0UmlnaHQgPSBzZWFyY2hCbG9ja0luZGV4O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYmkgPSBmaXJzdElucHV0QXRSaWdodDsgYmkgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK2JpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tBdFJpZ2h0ID0gdGhpcy5fYmxvY2tzW2JpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3MgPSBibG9ja0F0UmlnaHQubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJsb2NrQXRSaWdodC52YWx1ZS5sZW5ndGggfHwgX2Jsb2NrSW5wdXRQb3MgIT09IGJsb2NrQXRSaWdodC52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhiaSkgKyBfYmxvY2tJbnB1dFBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyA8LVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi1maXhlZCBzeW1ib2xcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYmkgPSBzZWFyY2hCbG9ja0luZGV4IC0gMTsgX2JpID49IDA7IC0tX2JpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrMyA9IHRoaXMuX2Jsb2Nrc1tfYmldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYmxvY2tJbnB1dFBvczIgPSBfYmxvY2szLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSk7IC8vIGlzIGlucHV0XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2Jsb2NrMy52YWx1ZS5sZW5ndGggfHwgX2Jsb2NrSW5wdXRQb3MyICE9PSBfYmxvY2szLnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaSkgKyBfYmxvY2szLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvclBvcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5MRUZUIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgYW55fGZpbGxlZC1pbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA8LVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgYW55fGZpcnN0IG5vdCBlbXB0eSBpcyBub3QtbGVuLWFsaWduZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIG5vdC0wLWFsaWduZWR8YW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkIG9yIGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBmaXJzdCBibG9jayBhdCByaWdodCBpcyBmaWxsZWQgaW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYmkyID0gc2VhcmNoQmxvY2tJbmRleDsgX2JpMiA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrX2JpMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Jsb2Nrc1tfYmkyXS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQgPSBfYmkyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsbGVkQmxvY2sgPSB0aGlzLl9ibG9ja3NbZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zMyA9IGZpbGxlZEJsb2NrLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uUklHSFQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczMgPT09IDAgJiYgZmlsbGVkQmxvY2sudW5tYXNrZWRWYWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaWxsZWQgYmxvY2sgaXMgaW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0KSArIF9ibG9ja0lucHV0UG9zMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyA8LVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIHRoaXMgdmFyc1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleDsgLy8gVE9ETyBjb25zaWRlciBuZXN0ZWQgZW1wdHkgaW5wdXRzXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYmkzID0gc2VhcmNoQmxvY2tJbmRleCAtIDE7IF9iaTMgPj0gMDsgLS1fYmkzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrNCA9IHRoaXMuX2Jsb2Nrc1tfYmkzXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M0ID0gX2Jsb2NrNC5uZWFyZXN0SW5wdXRQb3MoX2Jsb2NrNC52YWx1ZS5sZW5ndGgsIERJUkVDVElPTi5GT1JDRV9MRUZUKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ibG9jazQudmFsdWUgfHwgX2Jsb2NrSW5wdXRQb3M0ICE9PSAwKSBmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4ID0gX2JpMztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9ibG9ja0lucHV0UG9zNCAhPT0gX2Jsb2NrNC52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxpZ25lZCBpbnNpZGUgYmxvY2sgLSByZXR1cm4gaW1tZWRpYXRlbHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoX2JpMykgKyBfYmxvY2tJbnB1dFBvczQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm91bmQgZmlsbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ID0gX2JpMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uTEVGVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IGZpbmQgZmlyc3QgZW1wdHkgaW5wdXQgYmVmb3JlIHN0YXJ0IHNlYXJjaGluZyBwb3NpdGlvbiBvbmx5IHdoZW4gbm90IGZvcmNlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2JpNCA9IGZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4ICsgMTsgX2JpNCA8PSBNYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7ICsrX2JpNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYmxvY2s1ID0gdGhpcy5fYmxvY2tzW19iaTRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M1ID0gX2Jsb2NrNS5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tBbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk0KSArIF9ibG9ja0lucHV0UG9zNTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrQWxpZ25lZFBvcyA+IGN1cnNvclBvcykgYnJlYWs7IC8vIGlmIGJsb2NrIGlzIG5vdCBsYXp5IGlucHV0XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczUgIT09IF9ibG9jazUudmFsdWUubGVuZ3RoKSByZXR1cm4gYmxvY2tBbGlnbmVkUG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vIHByb2Nlc3Mgb3ZlcmZsb3dcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgpICsgdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4XS52YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gZm9yIGxhenkgaWYgaGFzIGFsaWduZWQgbGVmdCBpbnNpZGUgZml4ZWQgYW5kIGhhcyBjYW1lIHRvIHRoZSBzdGFydCAtIHVzZSBzdGFydCBwb3NpdGlvblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9MRUZUIHx8IHRoaXMubGF6eSAmJiAhdGhpcy5leHRyYWN0SW5wdXQoKSAmJiAhaXNJbnB1dCh0aGlzLl9ibG9ja3Nbc2VhcmNoQmxvY2tJbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RFbXB0eUlucHV0QmxvY2tJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gZmluZCBmaXJzdCBpbnB1dFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iaTUgPSBzZWFyY2hCbG9ja0luZGV4OyBfYmk1IDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytfYmk1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrNiA9IHRoaXMuX2Jsb2Nrc1tfYmk1XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M2ID0gX2Jsb2NrNi5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpOyAvLyBpcyBpbnB1dFxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ibG9jazYudmFsdWUubGVuZ3RoIHx8IF9ibG9ja0lucHV0UG9zNiAhPT0gX2Jsb2NrNi52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhfYmk1KSArIF9ibG9ja0lucHV0UG9zNjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT04uUklHSFQgfHwgZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfUklHSFQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIGFueXxub3QtbGVuLWFsaWduZWQgYW5kIGZpbGxlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgYW55fG5vdC1sZW4tYWxpZ25lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA8LVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgbm90LTAtYWxpZ25lZCBvciBzdGFydHxhbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYmk2ID0gc2VhcmNoQmxvY2tJbmRleDsgX2JpNiA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrX2JpNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ibG9jazcgPSB0aGlzLl9ibG9ja3NbX2JpNl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zNyA9IF9ibG9jazcubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M3ICE9PSBfYmxvY2s3LnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTYpICsgX2Jsb2NrSW5wdXRQb3M3O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleCA9IF9iaTY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXggIT0gbnVsbCAmJiBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iaTcgPSBmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXg7IF9iaTcgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK19iaTcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrOCA9IHRoaXMuX2Jsb2Nrc1tfYmk3XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ibG9ja0lucHV0UG9zOCA9IF9ibG9jazgubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYmxvY2tJbnB1dFBvczggIT09IF9ibG9jazgudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTcpICsgX2Jsb2NrSW5wdXRQb3M4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfUklHSFQgPyB0aGlzLnZhbHVlLmxlbmd0aCA6IGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iaTggPSBNYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSk7IF9iaTggPj0gMDsgLS1fYmk4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrOSA9IHRoaXMuX2Jsb2Nrc1tfYmk4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2Jsb2NrSW5wdXRQb3M5ID0gX2Jsb2NrOS5uZWFyZXN0SW5wdXRQb3MoX2Jsb2NrOS52YWx1ZS5sZW5ndGgsIERJUkVDVElPTi5MRUZUKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2Jsb2NrSW5wdXRQb3M5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKF9iaTgpICsgX2Jsb2NrSW5wdXRQb3M5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpZ25lZFBvcyA+PSBjdXJzb3JQb3MpIHJldHVybiBhbGlnbmVkUG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3Vyc29yUG9zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEdldCBibG9jayBieSBuYW1lICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwibWFza2VkQmxvY2tcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrZWRCbG9jayhuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFza2VkQmxvY2tzKG5hbWUpWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEdldCBhbGwgYmxvY2tzIGJ5IG5hbWUgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJtYXNrZWRCbG9ja3NcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrZWRCbG9ja3MobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNlcyA9IHRoaXMuX21hc2tlZEJsb2Nrc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluZGljZXMpIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kaWNlcy5tYXAoZnVuY3Rpb24gKGdpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuX2Jsb2Nrc1tnaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJzdGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFBhdHRlcm4ucHJvdG90eXBlKSwgXCJzdGF0ZVwiLCB0aGlzKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYmxvY2tzOiB0aGlzLl9ibG9ja3MubWFwKGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYi5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYmxvY2tzID0gc3RhdGUuX2Jsb2NrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkU3RhdGUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIFtcIl9ibG9ja3NcIl0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYiwgYmkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuc3RhdGUgPSBfYmxvY2tzW2JpXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImlzQ29tcGxldGVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MuZXZlcnkoZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuaXNDb21wbGV0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ciArPSBiLnVubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJycpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHVubWFza2VkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRQYXR0ZXJuLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCB1bm1hc2tlZFZhbHVlLCB0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gcmV0dXJuIF92YWx1ZSB3aGVuIG5vdCBpbiBjaGFuZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5yZWR1Y2UoZnVuY3Rpb24gKHN0ciwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyICs9IGIudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJycpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUGF0dGVybi5wcm90b3R5cGUpLCBcInZhbHVlXCIsIHZhbHVlLCB0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIE1hc2tlZFBhdHRlcm47XHJcbiAgICAgICAgfShNYXNrZWQpO1xyXG4gICAgTWFza2VkUGF0dGVybi5ERUZBVUxUUyA9IHtcclxuICAgICAgICBsYXp5OiB0cnVlLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyQ2hhcjogJ18nXHJcbiAgICB9O1xyXG4gICAgTWFza2VkUGF0dGVybi5TVE9QX0NIQVIgPSAnYCc7XHJcbiAgICBNYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSID0gJ1xcXFwnO1xyXG4gICAgTWFza2VkUGF0dGVybi5JbnB1dERlZmluaXRpb24gPSBQYXR0ZXJuSW5wdXREZWZpbml0aW9uO1xyXG4gICAgTWFza2VkUGF0dGVybi5GaXhlZERlZmluaXRpb24gPSBQYXR0ZXJuRml4ZWREZWZpbml0aW9uO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzSW5wdXQoYmxvY2spIHtcclxuICAgICAgICBpZiAoIWJsb2NrKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gYmxvY2sudmFsdWU7XHJcbiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCBibG9jay5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpICE9PSB2YWx1ZS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgSU1hc2suTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XHJcblxyXG4gICAgLyoqIFBhdHRlcm4gd2hpY2ggYWNjZXB0cyByYW5nZXMgKi9cclxuXHJcbiAgICB2YXIgTWFza2VkUmFuZ2UgPVxyXG4gICAgICAgIC8qI19fUFVSRV9fKi9cclxuICAgICAgICBmdW5jdGlvbiAoX01hc2tlZFBhdHRlcm4pIHtcclxuICAgICAgICAgICAgX2luaGVyaXRzKE1hc2tlZFJhbmdlLCBfTWFza2VkUGF0dGVybik7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWRSYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRSYW5nZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRSYW5nZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhNYXNrZWRSYW5nZSwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB0aGlzLnRvIHx8IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSB8fCAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heExlbmd0aCA9IFN0cmluZyhvcHRzLnRvKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWF4TGVuZ3RoICE9IG51bGwpIG1heExlbmd0aCA9IE1hdGgubWF4KG1heExlbmd0aCwgb3B0cy5tYXhMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMubWF4TGVuZ3RoID0gbWF4TGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKG9wdHMuZnJvbSkucGFkU3RhcnQobWF4TGVuZ3RoLCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b1N0ciA9IFN0cmluZyhvcHRzLnRvKS5wYWRTdGFydChtYXhMZW5ndGgsICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNhbWVDaGFyc0NvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNhbWVDaGFyc0NvdW50IDwgdG9TdHIubGVuZ3RoICYmIHRvU3RyW3NhbWVDaGFyc0NvdW50XSA9PT0gZnJvbVN0cltzYW1lQ2hhcnNDb3VudF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytzYW1lQ2hhcnNDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdChtYXhMZW5ndGggLSBzYW1lQ2hhcnNDb3VudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJhbmdlLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJib3VuZGFyaWVzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYm91bmRhcmllcyhzdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluc3RyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heHN0ciA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZiA9IHN0ci5tYXRjaCgvXihcXEQqKShcXGQqKShcXEQqKS8pIHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYyWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW0gPSBfcmVmMlsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5zdHIgPSAnMCcucmVwZWF0KHBsYWNlaG9sZGVyLmxlbmd0aCkgKyBudW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHN0ciA9ICc5Jy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1pbnN0ciA9IG1pbnN0ci5wYWRFbmQodGhpcy5tYXhMZW5ndGgsICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4c3RyID0gbWF4c3RyLnBhZEVuZCh0aGlzLm1heExlbmd0aCwgJzknKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW21pbnN0ciwgbWF4c3RyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9QcmVwYXJlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9QcmVwYXJlKHN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkUmFuZ2UucHJvdG90eXBlKSwgXCJkb1ByZXBhcmVcIiwgdGhpcykuY2FsbCh0aGlzLCBzdHIsIGZsYWdzKS5yZXBsYWNlKC9cXEQvZywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5hdXRvZml4KSByZXR1cm4gc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tU3RyID0gU3RyaW5nKHRoaXMuZnJvbSkucGFkU3RhcnQodGhpcy5tYXhMZW5ndGgsICcwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmVwU3RyID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBzdHIubGVuZ3RoOyArK2NpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0VmFsID0gdmFsICsgcHJlcFN0ciArIHN0cltjaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkYm91bmRhcmllcyA9IHRoaXMuYm91bmRhcmllcyhuZXh0VmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzJGJvdW5kYXJpZXMyID0gX3NsaWNlZFRvQXJyYXkoX3RoaXMkYm91bmRhcmllcywgMiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5zdHIgPSBfdGhpcyRib3VuZGFyaWVzMlswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heHN0ciA9IF90aGlzJGJvdW5kYXJpZXMyWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlcihtYXhzdHIpIDwgdGhpcy5mcm9tKSBwcmVwU3RyICs9IGZyb21TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTsgZWxzZSBpZiAoTnVtYmVyKG1pbnN0cikgPiB0aGlzLnRvKSBwcmVwU3RyICs9IHRvU3RyW25leHRWYWwubGVuZ3RoIC0gMV07IGVsc2UgcHJlcFN0ciArPSBzdHJbY2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXBTdHI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvVmFsaWRhdGVcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfZ2V0MjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Tm9uWmVybyA9IHN0ci5zZWFyY2goL1teMF0vKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3ROb25aZXJvID09PSAtMSAmJiBzdHIubGVuZ3RoIDw9IHRoaXMuX21hdGNoRnJvbSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyRib3VuZGFyaWVzMyA9IHRoaXMuYm91bmRhcmllcyhzdHIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcyRib3VuZGFyaWVzNCA9IF9zbGljZWRUb0FycmF5KF90aGlzJGJvdW5kYXJpZXMzLCAyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluc3RyID0gX3RoaXMkYm91bmRhcmllczRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHN0ciA9IF90aGlzJGJvdW5kYXJpZXM0WzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb20gPD0gTnVtYmVyKG1heHN0cikgJiYgTnVtYmVyKG1pbnN0cikgPD0gdGhpcy50byAmJiAoX2dldDIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRSYW5nZS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX21hdGNoRnJvbVwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBPcHRpb25hbGx5IHNldHMgbWF4IGxlbmd0aCBvZiBwYXR0ZXJuLlxyXG4gICAgICAgICAgICAgICAgICBVc2VkIHdoZW4gcGF0dGVybiBsZW5ndGggaXMgbG9uZ2VyIHRoZW4gYHRvYCBwYXJhbSBsZW5ndGguIFBhZHMgemVyb3MgYXQgc3RhcnQgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgICAgICAvKiogTWluIGJvdW5kICovXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqIE1heCBib3VuZCAqL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF4TGVuZ3RoIC0gU3RyaW5nKHRoaXMuZnJvbSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiaXNDb21wbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZFJhbmdlLnByb3RvdHlwZSksIFwiaXNDb21wbGV0ZVwiLCB0aGlzKSAmJiBCb29sZWFuKHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gTWFza2VkUmFuZ2U7XHJcbiAgICAgICAgfShNYXNrZWRQYXR0ZXJuKTtcclxuICAgIElNYXNrLk1hc2tlZFJhbmdlID0gTWFza2VkUmFuZ2U7XHJcblxyXG4gICAgLyoqIERhdGUgbWFzayAqL1xyXG5cclxuICAgIHZhciBNYXNrZWREYXRlID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKF9NYXNrZWRQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIF9pbmhlcml0cyhNYXNrZWREYXRlLCBfTWFza2VkUGF0dGVybik7XHJcblxyXG4gICAgICAgICAgICAvKiogUGF0dGVybiBtYXNrIGZvciBkYXRlIGFjY29yZGluZyB0byB7QGxpbmsgTWFza2VkRGF0ZSNmb3JtYXR9ICovXHJcblxyXG4gICAgICAgICAgICAvKiogU3RhcnQgZGF0ZSAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIEVuZCBkYXRlICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1hc2tlZERhdGUob3B0cykge1xyXG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZERhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWFza2VkRGF0ZSkuY2FsbCh0aGlzLCBPYmplY3QuYXNzaWduKHt9LCBNYXNrZWREYXRlLkRFRkFVTFRTLCB7fSwgb3B0cykpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoTWFza2VkRGF0ZSwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWFzayA9PT0gRGF0ZSkgZGVsZXRlIG9wdHMubWFzaztcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5wYXR0ZXJuKSBvcHRzLm1hc2sgPSBvcHRzLnBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrcyA9IG9wdHMuYmxvY2tzO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuYmxvY2tzID0gT2JqZWN0LmFzc2lnbih7fSwgTWFza2VkRGF0ZS5HRVRfREVGQVVMVF9CTE9DS1MoKSk7IC8vIGFkanVzdCB5ZWFyIGJsb2NrXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1pbikgb3B0cy5ibG9ja3MuWS5mcm9tID0gb3B0cy5taW4uZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXgpIG9wdHMuYmxvY2tzLlkudG8gPSBvcHRzLm1heC5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5taW4gJiYgb3B0cy5tYXggJiYgb3B0cy5ibG9ja3MuWS5mcm9tID09PSBvcHRzLmJsb2Nrcy5ZLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuYmxvY2tzLm0uZnJvbSA9IG9wdHMubWluLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmJsb2Nrcy5tLnRvID0gb3B0cy5tYXguZ2V0TW9udGgoKSArIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5ibG9ja3MubS5mcm9tID09PSBvcHRzLmJsb2Nrcy5tLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmJsb2Nrcy5kLmZyb20gPSBvcHRzLm1pbi5nZXREYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmJsb2Nrcy5kLnRvID0gb3B0cy5tYXguZ2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG9wdHMuYmxvY2tzLCBibG9ja3MpOyAvLyBhZGQgYXV0b2ZpeFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRzLmJsb2NrcykuZm9yRWFjaChmdW5jdGlvbiAoYmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBvcHRzLmJsb2Nrc1tia107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCdhdXRvZml4JyBpbiBiKSkgYi5hdXRvZml4ID0gb3B0cy5hdXRvZml4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkb1ZhbGlkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9WYWxpZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2dldDI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gdGhpcy5kYXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2dldDIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwiZG9WYWxpZGF0ZVwiLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MiwgW3RoaXNdLmNvbmNhdChhcmdzKSkgJiYgKCF0aGlzLmlzQ29tcGxldGUgfHwgdGhpcy5pc0RhdGVFeGlzdCh0aGlzLnZhbHVlKSAmJiBkYXRlICE9IG51bGwgJiYgKHRoaXMubWluID09IG51bGwgfHwgdGhpcy5taW4gPD0gZGF0ZSkgJiYgKHRoaXMubWF4ID09IG51bGwgfHwgZGF0ZSA8PSB0aGlzLm1heCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIENoZWNrcyBpZiBkYXRlIGlzIGV4aXN0cyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImlzRGF0ZUV4aXN0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNEYXRlRXhpc3Qoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHRoaXMucGFyc2Uoc3RyLCB0aGlzKSwgdGhpcykgPT09IHN0cjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBQYXJzZWQgRGF0ZSAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRhdGVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZWRWYWx1ZSA9IGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInR5cGVkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGUgPyBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwidHlwZWRWYWx1ZVwiLCB0aGlzKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREYXRlLnByb3RvdHlwZSksIFwidHlwZWRWYWx1ZVwiLCB2YWx1ZSwgdGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXNrZWREYXRlO1xyXG4gICAgICAgIH0oTWFza2VkUGF0dGVybik7XHJcbiAgICBNYXNrZWREYXRlLkRFRkFVTFRTID0ge1xyXG4gICAgICAgIHBhdHRlcm46ICdkey59YG17Ln1gWScsXHJcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQoZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgICAgICAgICB2YXIgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICAgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBbZGF5LCBtb250aCwgeWVhcl0uam9pbignLicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHN0cikge1xyXG4gICAgICAgICAgICB2YXIgX3N0ciRzcGxpdCA9IHN0ci5zcGxpdCgnLicpLFxyXG4gICAgICAgICAgICAgICAgX3N0ciRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfc3RyJHNwbGl0LCAzKSxcclxuICAgICAgICAgICAgICAgIGRheSA9IF9zdHIkc3BsaXQyWzBdLFxyXG4gICAgICAgICAgICAgICAgbW9udGggPSBfc3RyJHNwbGl0MlsxXSxcclxuICAgICAgICAgICAgICAgIHllYXIgPSBfc3RyJHNwbGl0MlsyXTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBNYXNrZWREYXRlLkdFVF9ERUZBVUxUX0JMT0NLUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkOiB7XHJcbiAgICAgICAgICAgICAgICBtYXNrOiBNYXNrZWRSYW5nZSxcclxuICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICB0bzogMzEsXHJcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IDJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbToge1xyXG4gICAgICAgICAgICAgICAgbWFzazogTWFza2VkUmFuZ2UsXHJcbiAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgdG86IDEyLFxyXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFk6IHtcclxuICAgICAgICAgICAgICAgIG1hc2s6IE1hc2tlZFJhbmdlLFxyXG4gICAgICAgICAgICAgICAgZnJvbTogMTkwMCxcclxuICAgICAgICAgICAgICAgIHRvOiA5OTk5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBJTWFzay5NYXNrZWREYXRlID0gTWFza2VkRGF0ZTtcclxuXHJcblx0LyoqXHJcblx0ICBHZW5lcmljIGVsZW1lbnQgQVBJIHRvIHVzZSB3aXRoIG1hc2tcclxuXHQgIEBpbnRlcmZhY2VcclxuXHQqL1xyXG4gICAgdmFyIE1hc2tFbGVtZW50ID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhNYXNrRWxlbWVudCwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJzZWxlY3RcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogU2FmZWx5IHNldHMgZWxlbWVudCBzZWxlY3Rpb24gKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3Qoc3RhcnQsIGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PSBudWxsIHx8IGVuZCA9PSBudWxsIHx8IHN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvblN0YXJ0ICYmIGVuZCA9PT0gdGhpcy5zZWxlY3Rpb25FbmQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFNob3VsZCBiZSBvdmVycmlkZW4gaW4gc3ViY2xhc3NlcyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl91bnNhZmVTZWxlY3RcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpIHsgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFNob3VsZCBiZSBvdmVycmlkZW4gaW4gc3ViY2xhc3NlcyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImJpbmRFdmVudHNcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEV2ZW50cyhoYW5kbGVycykgeyB9XHJcbiAgICAgICAgICAgICAgICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidW5iaW5kRXZlbnRzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRzKCkgeyB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJzZWxlY3Rpb25TdGFydFwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiBTYWZlbHkgcmV0dXJucyBzZWxlY3Rpb24gc3RhcnQgKi9cclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0ICE9IG51bGwgPyBzdGFydCA6IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFNhZmVseSByZXR1cm5zIHNlbGVjdGlvbiBlbmQgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJzZWxlY3Rpb25FbmRcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuX3Vuc2FmZVNlbGVjdGlvbkVuZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuZCAhPSBudWxsID8gZW5kIDogdGhpcy52YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJpc0FjdGl2ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gTWFza0VsZW1lbnQ7XHJcbiAgICAgICAgfSgpO1xyXG4gICAgSU1hc2suTWFza0VsZW1lbnQgPSBNYXNrRWxlbWVudDtcclxuXHJcbiAgICAvKiogQnJpZGdlIGJldHdlZW4gSFRNTEVsZW1lbnQgYW5kIHtAbGluayBNYXNrZWR9ICovXHJcblxyXG4gICAgdmFyIEhUTUxNYXNrRWxlbWVudCA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uIChfTWFza0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgX2luaGVyaXRzKEhUTUxNYXNrRWxlbWVudCwgX01hc2tFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBNYXBwaW5nIGJldHdlZW4gSFRNTEVsZW1lbnQgZXZlbnRzIGFuZCBtYXNrIGludGVybmFsIGV2ZW50cyAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIEhUTUxFbGVtZW50IHRvIHVzZSBtYXNrIG9uICovXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR8SFRNTFRleHRBcmVhRWxlbWVudH0gaW5wdXRcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gSFRNTE1hc2tFbGVtZW50KGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhUTUxNYXNrRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoSFRNTE1hc2tFbGVtZW50KS5jYWxsKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlcnMgPSB7fTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiogKi9cclxuICAgICAgICAgICAgLy8gJEZsb3dGaXhcclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhIVE1MTWFza0VsZW1lbnQsIFt7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdFwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBTZXRzIEhUTUxFbGVtZW50IHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBIVE1MRWxlbWVudCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiYmluZEV2ZW50c1wiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBCaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRFdmVudHMoaGFuZGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuX3RvZ2dsZUV2ZW50SGFuZGxlcihIVE1MTWFza0VsZW1lbnQuRVZFTlRTX01BUFtldmVudF0sIGhhbmRsZXJzW2V2ZW50XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgVW5iaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInVuYmluZEV2ZW50c1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50cygpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5faGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3RvZ2dsZUV2ZW50SGFuZGxlcihldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdG9nZ2xlRXZlbnRIYW5kbGVyXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3RvZ2dsZUV2ZW50SGFuZGxlcihldmVudCwgaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYW5kbGVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLl9oYW5kbGVyc1tldmVudF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5faGFuZGxlcnNbZXZlbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJyb290RWxlbWVudFwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQuZ2V0Um9vdE5vZGUgPyB0aGlzLmlucHV0LmdldFJvb3ROb2RlKCkgOiBkb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBJcyBlbGVtZW50IGluIGZvY3VzXHJcbiAgICAgICAgICAgICAgICAgIEByZWFkb25seVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJpc0FjdGl2ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kRmxvd0ZpeE1lXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQgPT09IHRoaXMucm9vdEVsZW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdGlvblN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5zZWxlY3Rpb25TdGFydDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBlbmRcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl91bnNhZmVTZWxlY3Rpb25FbmRcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0LnNlbGVjdGlvbkVuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIEhUTUxNYXNrRWxlbWVudDtcclxuICAgICAgICB9KE1hc2tFbGVtZW50KTtcclxuICAgIEhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQID0ge1xyXG4gICAgICAgIHNlbGVjdGlvbkNoYW5nZTogJ2tleWRvd24nLFxyXG4gICAgICAgIGlucHV0OiAnaW5wdXQnLFxyXG4gICAgICAgIGRyb3A6ICdkcm9wJyxcclxuICAgICAgICBjbGljazogJ2NsaWNrJyxcclxuICAgICAgICBmb2N1czogJ2ZvY3VzJyxcclxuICAgICAgICBjb21taXQ6ICdibHVyJ1xyXG4gICAgfTtcclxuICAgIElNYXNrLkhUTUxNYXNrRWxlbWVudCA9IEhUTUxNYXNrRWxlbWVudDtcclxuXHJcbiAgICB2YXIgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50ID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKF9IVE1MTWFza0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgX2luaGVyaXRzKEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCwgX0hUTUxNYXNrRWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQoKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQsIFt7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdFwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBTZXRzIEhUTUxFbGVtZW50IHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Vuc2FmZVNlbGVjdChzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJvb3RFbGVtZW50LmNyZWF0ZVJhbmdlKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRoaXMuaW5wdXQuZmlyc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHRoaXMuaW5wdXQubGFzdENoaWxkIHx8IHRoaXMuaW5wdXQsIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgSFRNTEVsZW1lbnQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl91bnNhZmVTZWxlY3Rpb25TdGFydFwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBSZXR1cm5zIEhUTUxFbGVtZW50IHNlbGVjdGlvbiBzdGFydFxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHJvb3QuZ2V0U2VsZWN0aW9uICYmIHJvb3QuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIGVuZFxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3Vuc2FmZVNlbGVjdGlvbkVuZFwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24gJiYgdGhpcy5fdW5zYWZlU2VsZWN0aW9uU3RhcnQgKyBTdHJpbmcoc2VsZWN0aW9uKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0LnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50O1xyXG4gICAgICAgIH0oSFRNTE1hc2tFbGVtZW50KTtcclxuICAgIElNYXNrLkhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudCA9IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudDtcclxuXHJcbiAgICAvKiogTGlzdGVucyB0byBlbGVtZW50IGV2ZW50cyBhbmQgY29udHJvbHMgY2hhbmdlcyBiZXR3ZWVuIGVsZW1lbnQgYW5kIHtAbGluayBNYXNrZWR9ICovXHJcblxyXG4gICAgdmFyIElucHV0TWFzayA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgVmlldyBlbGVtZW50XHJcbiAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICBJbnRlcm5hbCB7QGxpbmsgTWFza2VkfSBtb2RlbFxyXG4gICAgICAgICAgICAgIEByZWFkb25seVxyXG4gICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgQHBhcmFtIHtNYXNrRWxlbWVudHxIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR9IGVsXHJcbiAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gSW5wdXRNYXNrKGVsLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5wdXRNYXNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsID0gZWwgaW5zdGFuY2VvZiBNYXNrRWxlbWVudCA/IGVsIDogZWwuaXNDb250ZW50RWRpdGFibGUgJiYgZWwudGFnTmFtZSAhPT0gJ0lOUFVUJyAmJiBlbC50YWdOYW1lICE9PSAnVEVYVEFSRUEnID8gbmV3IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudChlbCkgOiBuZXcgSFRNTE1hc2tFbGVtZW50KGVsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFza2VkID0gY3JlYXRlTWFzayhvcHRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VubWFza2VkVmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NhdmVTZWxlY3Rpb24gPSB0aGlzLl9zYXZlU2VsZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vbklucHV0ID0gdGhpcy5fb25JbnB1dC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UgPSB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25Ecm9wID0gdGhpcy5fb25Ecm9wLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkZvY3VzID0gdGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25DbGljayA9IHRoaXMuX29uQ2xpY2suYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25DdXJzb3IgPSB0aGlzLmFsaWduQ3Vyc29yLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWduQ3Vyc29yRnJpZW5kbHkgPSB0aGlzLmFsaWduQ3Vyc29yRnJpZW5kbHkuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kRXZlbnRzKCk7IC8vIHJlZnJlc2hcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyoqIFJlYWQgb3IgdXBkYXRlIG1hc2sgKi9cclxuXHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoSW5wdXRNYXNrLCBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm1hc2tFcXVhbHNcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYXNrRXF1YWxzKG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFzayA9PSBudWxsIHx8IG1hc2sgPT09IHRoaXMubWFza2VkLm1hc2sgfHwgbWFzayA9PT0gRGF0ZSAmJiB0aGlzLm1hc2tlZCBpbnN0YW5jZW9mIE1hc2tlZERhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfYmluZEV2ZW50c1wiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBTdGFydHMgbGlzdGVuaW5nIHRvIGVsZW1lbnQgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgIEBwcm90ZWN0ZWRcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5iaW5kRXZlbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uQ2hhbmdlOiB0aGlzLl9zYXZlU2VsZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogdGhpcy5fb25JbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcDogdGhpcy5fb25Ecm9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogdGhpcy5fb25DbGljayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IHRoaXMuX29uRm9jdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdDogdGhpcy5fb25DaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBTdG9wcyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHNcclxuICAgICAgICAgICAgICAgICAgQHByb3RlY3RlZFxyXG4gICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3VuYmluZEV2ZW50c1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91bmJpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC51bmJpbmRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBGaXJlcyBjdXN0b20gZXZlbnRcclxuICAgICAgICAgICAgICAgICAgQHByb3RlY3RlZFxyXG4gICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2ZpcmVFdmVudFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXJlRXZlbnQoZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW2V2XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQ3VycmVudCBzZWxlY3Rpb24gc3RhcnRcclxuICAgICAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9zYXZlU2VsZWN0aW9uXCIsXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIFN0b3JlcyBjdXJyZW50IHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICBAcHJvdGVjdGVkXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zYXZlU2VsZWN0aW9uKClcclxuXHQgICAgLyogZXYgKi8ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSB0aGlzLmVsLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRWxlbWVudCB2YWx1ZSB3YXMgY2hhbmdlZCBvdXRzaWRlIG9mIG1hc2suIFN5bmNyb25pemUgbWFzayB1c2luZyBgbWFzay51cGRhdGVWYWx1ZSgpYCB0byB3b3JrIHByb3Blcmx5LicpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc2VsZWN0aW9uU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdGhpcy5jdXJzb3JQb3NcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFN5bmNyb25pemVzIG1vZGVsIHZhbHVlIGZyb20gdmlldyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInVwZGF0ZVZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVmFsdWUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSB0aGlzLmVsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogU3luY3Jvbml6ZXMgdmlldyBmcm9tIG1vZGVsIHZhbHVlLCBmaXJlcyBjaGFuZ2UgZXZlbnRzICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidXBkYXRlQ29udHJvbFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2woKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1VubWFza2VkVmFsdWUgPSB0aGlzLm1hc2tlZC51bm1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMubWFza2VkLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NoYW5nZWQgPSB0aGlzLnVubWFza2VkVmFsdWUgIT09IG5ld1VubWFza2VkVmFsdWUgfHwgdGhpcy52YWx1ZSAhPT0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5tYXNrZWRWYWx1ZSA9IG5ld1VubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHRoaXMuZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFuZ2VkKSB0aGlzLl9maXJlQ2hhbmdlRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogVXBkYXRlcyBvcHRpb25zIHdpdGggZGVlcCBlcXVhbCBjaGVjaywgcmVjcmVhdGVzIEB7bGluayBNYXNrZWR9IG1vZGVsIGlmIG1hc2sgdHlwZSBjaGFuZ2VzICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidXBkYXRlT3B0aW9uc1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrID0gb3B0cy5tYXNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN0T3B0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRzLCBbXCJtYXNrXCJdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZU1hc2sgPSAhdGhpcy5tYXNrRXF1YWxzKG1hc2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVPcHRzID0gIW9iamVjdEluY2x1ZGVzKHRoaXMubWFza2VkLCByZXN0T3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU1hc2spIHRoaXMubWFzayA9IG1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZU9wdHMpIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMocmVzdE9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVNYXNrIHx8IHVwZGF0ZU9wdHMpIHRoaXMudXBkYXRlQ29udHJvbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFVwZGF0ZXMgY3Vyc29yICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidXBkYXRlQ3Vyc29yXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ3Vyc29yKGN1cnNvclBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3JQb3MgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yUG9zID0gY3Vyc29yUG9zOyAvLyBhbHNvIHF1ZXVlIGNoYW5nZSBjdXJzb3IgZm9yIG1vYmlsZSBicm93c2Vyc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxheVVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIERlbGF5cyBjdXJzb3IgdXBkYXRlIHRvIHN1cHBvcnQgbW9iaWxlIGJyb3dzZXJzXHJcbiAgICAgICAgICAgICAgICAgIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9kZWxheVVwZGF0ZUN1cnNvclwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxheVVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2luZ0N1cnNvclBvcyA9IGN1cnNvclBvcztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JDaGFuZ2luZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmVsKSByZXR1cm47IC8vIGlmIHdhcyBkZXN0cm95ZWRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnNvclBvcyA9IF90aGlzLl9jaGFuZ2luZ0N1cnNvclBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBGaXJlcyBjdXN0b20gZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgIEBwcm90ZWN0ZWRcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2ZpcmVDaGFuZ2VFdmVudHNcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlyZUNoYW5nZUV2ZW50cygpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ2FjY2VwdCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXNrZWQuaXNDb21wbGV0ZSkgdGhpcy5fZmlyZUV2ZW50KCdjb21wbGV0ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEFib3J0cyBkZWxheWVkIGN1cnNvciB1cGRhdGVcclxuICAgICAgICAgICAgICAgICAgQHByaXZhdGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2Fib3J0VXBkYXRlQ3Vyc29yXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Fib3J0VXBkYXRlQ3Vyc29yKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JDaGFuZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fY3Vyc29yQ2hhbmdpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY3Vyc29yQ2hhbmdpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEFsaWducyBjdXJzb3IgdG8gbmVhcmVzdCBhdmFpbGFibGUgcG9zaXRpb24gKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJhbGlnbkN1cnNvclwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFsaWduQ3Vyc29yKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yUG9zID0gdGhpcy5tYXNrZWQubmVhcmVzdElucHV0UG9zKHRoaXMuY3Vyc29yUG9zLCBESVJFQ1RJT04uTEVGVCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogQWxpZ25zIGN1cnNvciBvbmx5IGlmIHNlbGVjdGlvbiBpcyBlbXB0eSAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFsaWduQ3Vyc29yRnJpZW5kbHlcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhbGlnbkN1cnNvckZyaWVuZGx5KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSB0aGlzLmN1cnNvclBvcykgcmV0dXJuOyAvLyBza2lwIGlmIHJhbmdlIGlzIHNlbGVjdGVkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBBZGRzIGxpc3RlbmVyIG9uIGN1c3RvbSBldmVudCAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm9uXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXYsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHRoaXMuX2xpc3RlbmVyc1tldl0gPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2XS5wdXNoKGhhbmRsZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBSZW1vdmVzIGN1c3RvbSBldmVudCBsaXN0ZW5lciAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm9mZlwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldiwgaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2XSkgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2V2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaEluZGV4ID0gdGhpcy5fbGlzdGVuZXJzW2V2XS5pbmRleE9mKGhhbmRsZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaEluZGV4ID49IDApIHRoaXMuX2xpc3RlbmVyc1tldl0uc3BsaWNlKGhJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogSGFuZGxlcyB2aWV3IGlucHV0IGV2ZW50ICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX29uSW5wdXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25JbnB1dCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpOyAvLyBmaXggc3RyYW5nZSBJRSBiZWhhdmlvclxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zZWxlY3Rpb24pIHJldHVybiB0aGlzLnVwZGF0ZVZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSBuZXcgQWN0aW9uRGV0YWlscyggLy8gbmV3IHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwudmFsdWUsIHRoaXMuY3Vyc29yUG9zLCAvLyBvbGQgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSwgdGhpcy5fc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkUmF3VmFsdWUgPSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm1hc2tlZC5zcGxpY2UoZGV0YWlscy5zdGFydENoYW5nZVBvcywgZGV0YWlscy5yZW1vdmVkLmxlbmd0aCwgZGV0YWlscy5pbnNlcnRlZCwgZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24pLm9mZnNldDsgLy8gZm9yY2UgYWxpZ24gaW4gcmVtb3ZlIGRpcmVjdGlvbiBvbmx5IGlmIG5vIGlucHV0IGNoYXJzIHdlcmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBzdGlsbCBuZWVkIHRvIGFsaWduIHdpdGggTk9ORSAodG8gZ2V0IG91dCBmcm9tIGZpeGVkIHN5bWJvbHMgZm9yIGluc3RhbmNlKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlRGlyZWN0aW9uID0gb2xkUmF3VmFsdWUgPT09IHRoaXMubWFza2VkLnJhd0lucHV0VmFsdWUgPyBkZXRhaWxzLnJlbW92ZURpcmVjdGlvbiA6IERJUkVDVElPTi5OT05FO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3MoZGV0YWlscy5zdGFydENoYW5nZVBvcyArIG9mZnNldCwgcmVtb3ZlRGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEhhbmRsZXMgdmlldyBjaGFuZ2UgZXZlbnQgYW5kIGNvbW1pdHMgbW9kZWwgdmFsdWUgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfb25DaGFuZ2VcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgIT09IHRoaXMuZWwudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2F2ZVNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIEhhbmRsZXMgdmlldyBkcm9wIGV2ZW50LCBwcmV2ZW50cyBieSBkZWZhdWx0ICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX29uRHJvcFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRyb3AoZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFJlc3RvcmUgbGFzdCBzZWxlY3Rpb24gb24gZm9jdXMgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfb25Gb2N1c1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkZvY3VzKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9vbkNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ2xpY2soZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsaWduQ3Vyc29yRnJpZW5kbHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiBVbmJpbmQgdmlldyBldmVudHMgYW5kIHJlbW92ZXMgZWxlbWVudCByZWZlcmVuY2UgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkZXN0cm95XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmJpbmRFdmVudHMoKTsgLy8gJEZsb3dGaXhNZSB3aHkgbm90IGRvIHNvP1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmxlbmd0aCA9IDA7IC8vICRGbG93Rml4TWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJtYXNrXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrZWQubWFzaztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWFza0VxdWFscyhtYXNrKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXNrZWQuY29uc3RydWN0b3IgPT09IG1hc2tlZENsYXNzKG1hc2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogbWFza1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tlZCA9IGNyZWF0ZU1hc2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBtYXNrXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza2VkLnVubWFza2VkVmFsdWUgPSB0aGlzLm1hc2tlZC51bm1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFza2VkID0gbWFza2VkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFJhdyB2YWx1ZSAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrZWQudmFsdWUgPSBzdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGlnbkN1cnNvcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFVubWFza2VkIHZhbHVlICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZSA9IHN0cjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRyb2woKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogVHlwZWQgdW5tYXNrZWQgdmFsdWUgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXNrZWQudHlwZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tlZC50eXBlZFZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udHJvbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25DdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInNlbGVjdGlvblN0YXJ0XCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3Vyc29yQ2hhbmdpbmcgPyB0aGlzLl9jaGFuZ2luZ0N1cnNvclBvcyA6IHRoaXMuZWwuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJjdXJzb3JQb3NcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDogdGhpcy5lbC5zZWxlY3Rpb25FbmQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmVsLmlzQWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5zZWxlY3QocG9zLCBwb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYXZlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBJbnB1dE1hc2s7XHJcbiAgICAgICAgfSgpO1xyXG4gICAgSU1hc2suSW5wdXRNYXNrID0gSW5wdXRNYXNrO1xyXG5cclxuICAgIC8qKiBQYXR0ZXJuIHdoaWNoIHZhbGlkYXRlcyBlbnVtIHZhbHVlcyAqL1xyXG5cclxuICAgIHZhciBNYXNrZWRFbnVtID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKF9NYXNrZWRQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIF9pbmhlcml0cyhNYXNrZWRFbnVtLCBfTWFza2VkUGF0dGVybik7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWRFbnVtKCkge1xyXG4gICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc2tlZEVudW0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWFza2VkRW51bSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhNYXNrZWRFbnVtLCBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl91cGRhdGVcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGUob3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmVudW0pIG9wdHMubWFzayA9ICcqJy5yZXBlYXQob3B0cy5lbnVtWzBdLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZEVudW0ucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvVmFsaWRhdGVcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9nZXQyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVudW0uc29tZShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5pbmRleE9mKF90aGlzLnVubWFza2VkVmFsdWUpID49IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkgJiYgKF9nZXQyID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRW51bS5wcm90b3R5cGUpLCBcImRvVmFsaWRhdGVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gTWFza2VkRW51bTtcclxuICAgICAgICB9KE1hc2tlZFBhdHRlcm4pO1xyXG4gICAgSU1hc2suTWFza2VkRW51bSA9IE1hc2tlZEVudW07XHJcblxyXG5cdC8qKlxyXG5cdCAgTnVtYmVyIG1hc2tcclxuXHQgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcblx0ICBAcGFyYW0ge3N0cmluZ30gb3B0cy5yYWRpeCAtIFNpbmdsZSBjaGFyXHJcblx0ICBAcGFyYW0ge3N0cmluZ30gb3B0cy50aG91c2FuZHNTZXBhcmF0b3IgLSBTaW5nbGUgY2hhclxyXG5cdCAgQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBvcHRzLm1hcFRvUmFkaXggLSBBcnJheSBvZiBzaW5nbGUgY2hhcnNcclxuXHQgIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm1pblxyXG5cdCAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWF4XHJcblx0ICBAcGFyYW0ge251bWJlcn0gb3B0cy5zY2FsZSAtIERpZ2l0cyBhZnRlciBwb2ludFxyXG5cdCAgQHBhcmFtIHtib29sZWFufSBvcHRzLnNpZ25lZCAtIEFsbG93IG5lZ2F0aXZlXHJcblx0ICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMubm9ybWFsaXplWmVyb3MgLSBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcclxuXHQgIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5wYWRGcmFjdGlvbmFsWmVyb3MgLSBGbGFnIHRvIHBhZCB0cmFpbGluZyB6ZXJvcyBhZnRlciBwb2ludCBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcclxuXHQqL1xyXG4gICAgdmFyIE1hc2tlZE51bWJlciA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uIChfTWFza2VkKSB7XHJcbiAgICAgICAgICAgIF9pbmhlcml0cyhNYXNrZWROdW1iZXIsIF9NYXNrZWQpO1xyXG5cclxuICAgICAgICAgICAgLyoqIFNpbmdsZSBjaGFyICovXHJcblxyXG4gICAgICAgICAgICAvKiogU2luZ2xlIGNoYXIgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBBcnJheSBvZiBzaW5nbGUgY2hhcnMgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgLyoqICovXHJcblxyXG4gICAgICAgICAgICAvKiogRGlnaXRzIGFmdGVyIHBvaW50ICovXHJcblxyXG4gICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBGbGFnIHRvIHBhZCB0cmFpbGluZyB6ZXJvcyBhZnRlciBwb2ludCBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gTWFza2VkTnVtYmVyKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWROdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyKS5jYWxsKHRoaXMsIE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZE51bWJlci5ERUZBVUxUUywge30sIG9wdHMpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICovXHJcblxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKE1hc2tlZE51bWJlciwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiX3VwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVSZWdFeHBzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlUmVnRXhwc1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVSZWdFeHBzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSBkaWZmZXJlbnQgcmVnZXhwIHRvIHByb2Nlc3MgdXNlciBpbnB1dCAobW9yZSBzdHJpY3QsIGlucHV0IHN1ZmZpeCkgYW5kIHRhaWwgc2hpZnRpbmdcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAnXicgKyAodGhpcy5hbGxvd05lZ2F0aXZlID8gJ1srfFxcXFwtXT8nIDogJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaWRJbnB1dCA9ICcoMHwoWzEtOV0rXFxcXGQqKSk/JztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWlkID0gJ1xcXFxkKic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9ICh0aGlzLnNjYWxlID8gJygnICsgZXNjYXBlUmVnRXhwKHRoaXMucmFkaXgpICsgJ1xcXFxkezAsJyArIHRoaXMuc2NhbGUgKyAnfSk/JyA6ICcnKSArICckJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1iZXJSZWdFeHBJbnB1dCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWRJbnB1dCArIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtYmVyUmVnRXhwID0gbmV3IFJlZ0V4cChzdGFydCArIG1pZCArIGVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwVG9SYWRpeFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ1snICsgdGhpcy5tYXBUb1JhZGl4Lm1hcChlc2NhcGVSZWdFeHApLmpvaW4oJycpICsgJ10nLCAnZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSwgJ2cnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSh0aGlzLl90aG91c2FuZHNTZXBhcmF0b3JSZWdFeHAsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9QcmVwYXJlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9QcmVwYXJlKHN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfZ2V0MjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2dldDIgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb1ByZXBhcmVcIiwgdGhpcykpLmNhbGwuYXBwbHkoX2dldDIsIFt0aGlzLCB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHN0ci5yZXBsYWNlKHRoaXMuX21hcFRvUmFkaXhSZWdFeHAsIHRoaXMucmFkaXgpKV0uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9zZXBhcmF0b3JzQ291bnRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VwYXJhdG9yc0NvdW50KHRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVuZE9uU2VwYXJhdG9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgdG87ICsrcG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZS5pbmRleE9mKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLCBwb3MpID09PSBwb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kT25TZXBhcmF0b3JzKSB0byArPSB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2VcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbGljZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlcGFyYXRvcnNDb3VudCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHNsaWNlKS5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0SW5wdXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0aGlzLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJF9hZGp1c3RSYW5nZVdpdCA9IHRoaXMuX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbVBvcywgdG9Qb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0MiA9IF9zbGljZWRUb0FycmF5KF90aGlzJF9hZGp1c3RSYW5nZVdpdCwgMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZyb21Qb3MgPSBfdGhpcyRfYWRqdXN0UmFuZ2VXaXQyWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0MlsxXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyhfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJleHRyYWN0SW5wdXRcIiwgdGhpcykuY2FsbCh0aGlzLCBmcm9tUG9zLCB0b1BvcywgZmxhZ3MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZENoYXJSYXdcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kQ2hhclJhdyhjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRob3VzYW5kc1NlcGFyYXRvcikgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl9hcHBlbmRDaGFyUmF3XCIsIHRoaXMpLmNhbGwodGhpcywgY2gsIGZsYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkJlZm9yZVRhaWxWYWx1ZSA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA/IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3ZhbHVlIDogdGhpcy5fdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCA9IHRoaXMuX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZShwcmV2QmVmb3JlVGFpbFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kRGV0YWlscyA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZE51bWJlci5wcm90b3R5cGUpLCBcIl9hcHBlbmRDaGFyUmF3XCIsIHRoaXMpLmNhbGwodGhpcywgY2gsIGZsYWdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMuX3ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmVmb3JlVGFpbFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID8gZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOiB0aGlzLl92YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UoYmVmb3JlVGFpbFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kRGV0YWlscy50YWlsU2hpZnQgKz0gKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwcGVuZERldGFpbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfZmluZFNlcGFyYXRvckFyb3VuZFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kU2VwYXJhdG9yQXJvdW5kKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRob3VzYW5kc1NlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoRnJvbSA9IHBvcyAtIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JQb3MgPSB0aGlzLnZhbHVlLmluZGV4T2YodGhpcy50aG91c2FuZHNTZXBhcmF0b3IsIHNlYXJjaEZyb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yUG9zIDw9IHBvcykgcmV0dXJuIHNlcGFyYXRvclBvcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbSwgdG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQXJvdW5kRnJvbVBvcyA9IHRoaXMuX2ZpbmRTZXBhcmF0b3JBcm91bmQoZnJvbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3JBcm91bmRGcm9tUG9zID49IDApIGZyb20gPSBzZXBhcmF0b3JBcm91bmRGcm9tUG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yQXJvdW5kVG9Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKHRvKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvckFyb3VuZFRvUG9zID49IDApIHRvID0gc2VwYXJhdG9yQXJvdW5kVG9Qb3MgKyB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmcm9tLCB0b107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlbW92ZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9Qb3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXMudmFsdWUubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0MyA9IHRoaXMuX2FkanVzdFJhbmdlV2l0aFNlcGFyYXRvcnMoZnJvbVBvcywgdG9Qb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkX2FkanVzdFJhbmdlV2l0NCA9IF9zbGljZWRUb0FycmF5KF90aGlzJF9hZGp1c3RSYW5nZVdpdDMsIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmcm9tUG9zID0gX3RoaXMkX2FkanVzdFJhbmdlV2l0NFswXTtcclxuICAgICAgICAgICAgICAgICAgICB0b1BvcyA9IF90aGlzJF9hZGp1c3RSYW5nZVdpdDRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlQmVmb3JlUG9zID0gdGhpcy52YWx1ZS5zbGljZSgwLCBmcm9tUG9zKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVBZnRlclBvcyA9IHRoaXMudmFsdWUuc2xpY2UodG9Qb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnQodmFsdWVCZWZvcmVQb3MubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWVCZWZvcmVQb3MgKyB2YWx1ZUFmdGVyUG9zKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKHZhbHVlQmVmb3JlUG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFpbFNoaWZ0OiAoYmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCAtIHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50KSAqIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJuZWFyZXN0SW5wdXRQb3NcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZWFyZXN0SW5wdXRQb3MoY3Vyc29yUG9zLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSByZXR1cm4gY3Vyc29yUG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERJUkVDVElPTi5OT05FOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdExlZnRQb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGN1cnNvclBvcyAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRMZWZ0UG9zID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvckF0TGVmdEVuZFBvcyA9IHNlcGFyYXRvckF0TGVmdFBvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJzb3JQb3MgPCBzZXBhcmF0b3JBdExlZnRFbmRQb3MgfHwgdGhpcy52YWx1ZS5sZW5ndGggPD0gc2VwYXJhdG9yQXRMZWZ0RW5kUG9zIHx8IGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXBhcmF0b3JBdExlZnRQb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBESVJFQ1RJT04uUklHSFQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX1JJR0hUOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JBdFJpZ2h0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yQXRSaWdodFBvcyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXBhcmF0b3JBdFJpZ2h0UG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3JQb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImRvVmFsaWRhdGVcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb1ZhbGlkYXRlKGZsYWdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IGZsYWdzLmlucHV0ID8gdGhpcy5fbnVtYmVyUmVnRXhwSW5wdXQgOiB0aGlzLl9udW1iZXJSZWdFeHA7IC8vIHZhbGlkYXRlIGFzIHN0cmluZ1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWQgPSByZWdleHAudGVzdCh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMudmFsdWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhbGlkYXRlIGFzIG51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gdGhpcy5udW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdmFsaWQgJiYgIWlzTmFOKG51bWJlcikgJiYgKCAvLyBjaGVjayBtaW4gYm91bmQgZm9yIG5lZ2F0aXZlIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taW4gPT0gbnVsbCB8fCB0aGlzLm1pbiA+PSAwIHx8IHRoaXMubWluIDw9IHRoaXMubnVtYmVyKSAmJiAoIC8vIGNoZWNrIG1heCBib3VuZCBmb3IgcG9zaXRpdmUgdmFsdWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXggPT0gbnVsbCB8fCB0aGlzLm1heCA8PSAwIHx8IHRoaXMubnVtYmVyIDw9IHRoaXMubWF4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZCAmJiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWROdW1iZXIucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgZmxhZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkb0NvbW1pdFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvQ29tbWl0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW1iZXIgPSB0aGlzLm51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkbnVtID0gbnVtYmVyOyAvLyBjaGVjayBib3VuZHNcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbiAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWF4KHZhbGlkbnVtLCB0aGlzLm1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heCAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWluKHZhbGlkbnVtLCB0aGlzLm1heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZG51bSAhPT0gbnVtYmVyKSB0aGlzLnVubWFza2VkVmFsdWUgPSBTdHJpbmcodmFsaWRudW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubm9ybWFsaXplWmVyb3MpIGZvcm1hdHRlZCA9IHRoaXMuX25vcm1hbGl6ZVplcm9zKGZvcm1hdHRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhZEZyYWN0aW9uYWxaZXJvcykgZm9ybWF0dGVkID0gdGhpcy5fcGFkRnJhY3Rpb25hbFplcm9zKGZvcm1hdHRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gZm9ybWF0dGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwiZG9Db21taXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKiAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9ub3JtYWxpemVaZXJvc1wiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3JtYWxpemVaZXJvcyh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModmFsdWUpLnNwbGl0KHRoaXMucmFkaXgpOyAvLyByZW1vdmUgbGVhZGluZyB6ZXJvc1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9eKFxcRCopKDAqKShcXGQqKS8sIGZ1bmN0aW9uIChtYXRjaCwgc2lnbiwgemVyb3MsIG51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2lnbiArIG51bTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsgLy8gYWRkIGxlYWRpbmcgemVyb1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoICYmICEvXFxkJC8udGVzdChwYXJ0c1swXSkpIHBhcnRzWzBdID0gcGFydHNbMF0gKyAnMCc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucmVwbGFjZSgvMCokLywgJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgemVyb3NcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFydHNbMV0ubGVuZ3RoKSBwYXJ0cy5sZW5ndGggPSAxOyAvLyByZW1vdmUgZnJhY3Rpb25hbFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnMocGFydHMuam9pbih0aGlzLnJhZGl4KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiogKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJfcGFkRnJhY3Rpb25hbFplcm9zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3BhZEZyYWN0aW9uYWxaZXJvcyh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMikgcGFydHMucHVzaCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHNbMV0gPSBwYXJ0c1sxXS5wYWRFbmQodGhpcy5zY2FsZSwgJzAnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbih0aGlzLnJhZGl4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwidW5tYXNrZWRWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fbm9ybWFsaXplWmVyb3ModGhpcy52YWx1ZSkpLnJlcGxhY2UodGhpcy5yYWRpeCwgJy4nKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh1bm1hc2tlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCB1bm1hc2tlZFZhbHVlLnJlcGxhY2UoJy4nLCB0aGlzLnJhZGl4KSwgdGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInR5cGVkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIodGhpcy51bm1hc2tlZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkTnVtYmVyLnByb3RvdHlwZSksIFwidW5tYXNrZWRWYWx1ZVwiLCBTdHJpbmcobiksIHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqIFBhcnNlZCBOdW1iZXIgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJudW1iZXJcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGVkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlZFZhbHVlID0gbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIElzIG5lZ2F0aXZlIGFsbG93ZWRcclxuICAgICAgICAgICAgICAgICAgQHJlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImFsbG93TmVnYXRpdmVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25lZCB8fCB0aGlzLm1pbiAhPSBudWxsICYmIHRoaXMubWluIDwgMCB8fCB0aGlzLm1heCAhPSBudWxsICYmIHRoaXMubWF4IDwgMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIE1hc2tlZE51bWJlcjtcclxuICAgICAgICB9KE1hc2tlZCk7XHJcbiAgICBNYXNrZWROdW1iZXIuREVGQVVMVFMgPSB7XHJcbiAgICAgICAgcmFkaXg6ICcsJyxcclxuICAgICAgICB0aG91c2FuZHNTZXBhcmF0b3I6ICcnLFxyXG4gICAgICAgIG1hcFRvUmFkaXg6IFsnLiddLFxyXG4gICAgICAgIHNjYWxlOiAyLFxyXG4gICAgICAgIHNpZ25lZDogZmFsc2UsXHJcbiAgICAgICAgbm9ybWFsaXplWmVyb3M6IHRydWUsXHJcbiAgICAgICAgcGFkRnJhY3Rpb25hbFplcm9zOiBmYWxzZVxyXG4gICAgfTtcclxuICAgIElNYXNrLk1hc2tlZE51bWJlciA9IE1hc2tlZE51bWJlcjtcclxuXHJcbiAgICAvKiogTWFza2luZyBieSBSZWdFeHAgKi9cclxuXHJcbiAgICB2YXIgTWFza2VkUmVnRXhwID1cclxuICAgICAgICAvKiNfX1BVUkVfXyovXHJcbiAgICAgICAgZnVuY3Rpb24gKF9NYXNrZWQpIHtcclxuICAgICAgICAgICAgX2luaGVyaXRzKE1hc2tlZFJlZ0V4cCwgX01hc2tlZCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWRSZWdFeHAoKSB7XHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkUmVnRXhwKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1hc2tlZFJlZ0V4cCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhNYXNrZWRSZWdFeHAsIFt7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX3VwZGF0ZVwiLFxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2VhcmNoKG9wdHMubWFzaykgPj0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRSZWdFeHAucHJvdG90eXBlKSwgXCJfdXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXNrZWRSZWdFeHA7XHJcbiAgICAgICAgfShNYXNrZWQpO1xyXG4gICAgSU1hc2suTWFza2VkUmVnRXhwID0gTWFza2VkUmVnRXhwO1xyXG5cclxuICAgIC8qKiBNYXNraW5nIGJ5IGN1c3RvbSBGdW5jdGlvbiAqL1xyXG5cclxuICAgIHZhciBNYXNrZWRGdW5jdGlvbiA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uIChfTWFza2VkKSB7XHJcbiAgICAgICAgICAgIF9pbmhlcml0cyhNYXNrZWRGdW5jdGlvbiwgX01hc2tlZCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWRGdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXNrZWRGdW5jdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNYXNrZWRGdW5jdGlvbikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhNYXNrZWRGdW5jdGlvbiwgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrKSBvcHRzLnZhbGlkYXRlID0gb3B0cy5tYXNrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWRGdW5jdGlvbi5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfV0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIE1hc2tlZEZ1bmN0aW9uO1xyXG4gICAgICAgIH0oTWFza2VkKTtcclxuICAgIElNYXNrLk1hc2tlZEZ1bmN0aW9uID0gTWFza2VkRnVuY3Rpb247XHJcblxyXG4gICAgLyoqIER5bmFtaWMgbWFzayBmb3IgY2hvb3NpbmcgYXByb3ByaWF0ZSBtYXNrIGluIHJ1bi10aW1lICovXHJcbiAgICB2YXIgTWFza2VkRHluYW1pYyA9XHJcbiAgICAgICAgLyojX19QVVJFX18qL1xyXG4gICAgICAgIGZ1bmN0aW9uIChfTWFza2VkKSB7XHJcbiAgICAgICAgICAgIF9pbmhlcml0cyhNYXNrZWREeW5hbWljLCBfTWFza2VkKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiBDdXJyZW50bHkgY2hvc2VuIG1hc2sgKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBDb21wbGlsZWQge0BsaW5rIE1hc2tlZH0gb3B0aW9ucyAqL1xyXG5cclxuICAgICAgICAgICAgLyoqIENob29zZXMge0BsaW5rIE1hc2tlZH0gZGVwZW5kaW5nIG9uIGlucHV0IHZhbHVlICovXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrZWREeW5hbWljKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFza2VkRHluYW1pYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYykuY2FsbCh0aGlzLCBPYmplY3QuYXNzaWduKHt9LCBNYXNrZWREeW5hbWljLkRFRkFVTFRTLCB7fSwgb3B0cykpKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRNYXNrID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ2xhc3MoTWFza2VkRHluYW1pYywgW3tcclxuICAgICAgICAgICAgICAgIGtleTogXCJfdXBkYXRlXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZShvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcIl91cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdtYXNrJyBpbiBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hc2sgY291bGQgYmUgdG90YWxseSBkeW5hbWljIHdpdGggb25seSBgZGlzcGF0Y2hgIG9wdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBpbGVkTWFza3MgPSBBcnJheS5pc0FycmF5KG9wdHMubWFzaykgPyBvcHRzLm1hc2subWFwKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTWFzayhtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIl9hcHBlbmRDaGFyUmF3XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZENoYXJSYXcoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKChfdGhpcyRjdXJyZW50TWFzayA9IHRoaXMuY3VycmVudE1hc2spLl9hcHBlbmRDaGFyLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrLCBhcmd1bWVudHMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGx5RGlzcGF0Y2hcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwbHlEaXNwYXRjaCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZWYWx1ZUJlZm9yZVRhaWwgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgIT0gbnVsbCA/IGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3ZhbHVlIDogdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IHRoaXMucmF3SW5wdXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0VmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgIT0gbnVsbCA/IC8vICRGbG93Rml4TWUgLSB0aXJlZCB0byBmaWdodCB3aXRoIHR5cGUgc3lzdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3Jhd0lucHV0VmFsdWUgOiBpbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWlsVmFsdWUgPSBpbnB1dFZhbHVlLnNsaWNlKGluc2VydFZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZNYXNrID0gdGhpcy5jdXJyZW50TWFzaztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZNYXNrU3RhdGUgPSBwcmV2TWFzayAmJiBwcmV2TWFzay5zdGF0ZTsgLy8gY2xvbmUgZmxhZ3MgdG8gcHJldmVudCBvdmVyd3JpdGluZyBgX2JlZm9yZVRhaWxTdGF0ZWBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFzayA9IHRoaXMuZG9EaXNwYXRjaChhcHBlbmRlZCwgT2JqZWN0LmFzc2lnbih7fSwgZmxhZ3MpKTsgLy8gcmVzdG9yZSBzdGF0ZSBhZnRlciBkaXNwYXRjaFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzayAhPT0gcHJldk1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIG1hc2sgY2hhbmdlZCByZWFwcGx5IGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNYXNrLnJlc2V0KCk7IC8vICRGbG93Rml4TWUgLSBpdCdzIG9rLCB3ZSBkb24ndCBjaGFuZ2UgY3VycmVudCBtYXNrIGFib3ZlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB0aGlzLmN1cnJlbnRNYXNrLmFwcGVuZChpbnNlcnRWYWx1ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCA9IGQuaW5zZXJ0ZWQubGVuZ3RoIC0gcHJldlZhbHVlQmVmb3JlVGFpbC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhaWxWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBpdCdzIG9rLCB3ZSBkb24ndCBjaGFuZ2UgY3VycmVudCBtYXNrIGFib3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscy50YWlsU2hpZnQgKz0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQodGFpbFZhbHVlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFpbDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRhaWxTaGlmdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BhdGNoIGNhbiBkbyBzb21ldGhpbmcgYmFkIHdpdGggc3RhdGUsIHNvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXN0b3JlIHByZXYgbWFzayBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IHByZXZNYXNrU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiX2FwcGVuZFBsYWNlaG9sZGVyXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZFBsYWNlaG9sZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXRhaWxzID0gdGhpcy5fYXBwbHlEaXNwYXRjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJkb0Rpc3BhdGNoXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZG9EaXNwYXRjaChhcHBlbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goYXBwZW5kZWQsIHRoaXMsIGZsYWdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9WYWxpZGF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvVmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9nZXQyLCBfdGhpcyRjdXJyZW50TWFzazI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfZ2V0MiA9IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJkb1ZhbGlkYXRlXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSAmJiAoIXRoaXMuY3VycmVudE1hc2sgfHwgKF90aGlzJGN1cnJlbnRNYXNrMiA9IHRoaXMuY3VycmVudE1hc2spLmRvVmFsaWRhdGUuYXBwbHkoX3RoaXMkY3VycmVudE1hc2syLCBhcmdzKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInJlc2V0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBpbGVkTWFza3MuZm9yRWFjaChmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJyZW1vdmVcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSgoX3RoaXMkY3VycmVudE1hc2szID0gdGhpcy5jdXJyZW50TWFzaykucmVtb3ZlLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrMywgYXJndW1lbnRzKSkgLy8gdXBkYXRlIHdpdGggZGlzcGF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZ2dyZWdhdGUodGhpcy5fYXBwbHlEaXNwYXRjaCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhaWxzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJleHRyYWN0SW5wdXRcIixcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJbnB1dCgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMkY3VycmVudE1hc2s0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazQgPSB0aGlzLmN1cnJlbnRNYXNrKS5leHRyYWN0SW5wdXQuYXBwbHkoX3RoaXMkY3VycmVudE1hc2s0LCBhcmd1bWVudHMpIDogJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcImV4dHJhY3RUYWlsXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdFRhaWwoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzJGN1cnJlbnRNYXNrNSwgX2dldDM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IChfdGhpcyRjdXJyZW50TWFzazUgPSB0aGlzLmN1cnJlbnRNYXNrKS5leHRyYWN0VGFpbC5hcHBseShfdGhpcyRjdXJyZW50TWFzazUsIGFyZ3MpIDogKF9nZXQzID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcImV4dHJhY3RUYWlsXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQzLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiZG9Db21taXRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkb0NvbW1pdCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWFzaykgdGhpcy5jdXJyZW50TWFzay5kb0NvbW1pdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwiZG9Db21taXRcIiwgdGhpcykuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICBAb3ZlcnJpZGVcclxuICAgICAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwibmVhcmVzdElucHV0UG9zXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmVhcmVzdElucHV0UG9zKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyRjdXJyZW50TWFzazYsIF9nZXQ0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyAoX3RoaXMkY3VycmVudE1hc2s2ID0gdGhpcy5jdXJyZW50TWFzaykubmVhcmVzdElucHV0UG9zLmFwcGx5KF90aGlzJGN1cnJlbnRNYXNrNiwgYXJncykgOiAoX2dldDQgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihNYXNrZWREeW5hbWljLnByb3RvdHlwZSksIFwibmVhcmVzdElucHV0UG9zXCIsIHRoaXMpKS5jYWxsLmFwcGx5KF9nZXQ0LCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudmFsdWUgOiAnJztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJ2YWx1ZVwiLCB2YWx1ZSwgdGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgQG92ZXJyaWRlXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInVubWFza2VkVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay51bm1hc2tlZFZhbHVlIDogJyc7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodW5tYXNrZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJ1bm1hc2tlZFZhbHVlXCIsIHVubWFza2VkVmFsdWUsIHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJ0eXBlZFZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudHlwZWRWYWx1ZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgfSAvLyBwcm9iYWJseSB0eXBlZFZhbHVlIHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIGR5bmFtaWNcclxuICAgICAgICAgICAgICAgICxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVubWFza2VkVmFsdWUgPSBTdHJpbmcodmFsdWUpOyAvLyBkb3VibGUgY2hlY2sgaXRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVubWFza2VkVmFsdWUgPSB0aGlzLmN1cnJlbnRNYXNrLnVubWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVubWFza2VkVmFsdWUgPSB1bm1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgIEBvdmVycmlkZVxyXG4gICAgICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGtleTogXCJpc0NvbXBsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLmN1cnJlbnRNYXNrICYmIHRoaXMuY3VycmVudE1hc2suaXNDb21wbGV0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInN0YXRlXCIsXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgX2dldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInN0YXRlXCIsIHRoaXMpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yYXdJbnB1dFZhbHVlOiB0aGlzLnJhd0lucHV0VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGVkTWFza3M6IHRoaXMuY29tcGlsZWRNYXNrcy5tYXAoZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hc2tSZWY6IHRoaXMuY3VycmVudE1hc2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNYXNrOiB0aGlzLmN1cnJlbnRNYXNrICYmIHRoaXMuY3VycmVudE1hc2suc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21waWxlZE1hc2tzID0gc3RhdGUuY29tcGlsZWRNYXNrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hc2tSZWYgPSBzdGF0ZS5jdXJyZW50TWFza1JlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hc2sgPSBzdGF0ZS5jdXJyZW50TWFzayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkU3RhdGUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc3RhdGUsIFtcImNvbXBpbGVkTWFza3NcIiwgXCJjdXJyZW50TWFza1JlZlwiLCBcImN1cnJlbnRNYXNrXCJdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21waWxlZE1hc2tzLmZvckVhY2goZnVuY3Rpb24gKG0sIG1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLnN0YXRlID0gY29tcGlsZWRNYXNrc1ttaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFza1JlZiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE1hc2sgPSBjdXJyZW50TWFza1JlZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSA9IGN1cnJlbnRNYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3NldChfZ2V0UHJvdG90eXBlT2YoTWFza2VkRHluYW1pYy5wcm90b3R5cGUpLCBcInN0YXRlXCIsIG1hc2tlZFN0YXRlLCB0aGlzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAga2V5OiBcIm92ZXJ3cml0ZVwiLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudE1hc2sgPyB0aGlzLmN1cnJlbnRNYXNrLm92ZXJ3cml0ZSA6IF9nZXQoX2dldFByb3RvdHlwZU9mKE1hc2tlZER5bmFtaWMucHJvdG90eXBlKSwgXCJvdmVyd3JpdGVcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQob3ZlcndyaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdcIm92ZXJ3cml0ZVwiIG9wdGlvbiBpcyBub3QgYXZhaWxhYmxlIGluIGR5bmFtaWMgbWFzaywgdXNlIHRoaXMgb3B0aW9uIGluIHNpYmxpbmdzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBNYXNrZWREeW5hbWljO1xyXG4gICAgICAgIH0oTWFza2VkKTtcclxuICAgIE1hc2tlZER5bmFtaWMuREVGQVVMVFMgPSB7XHJcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGFwcGVuZGVkLCBtYXNrZWQsIGZsYWdzKSB7XHJcbiAgICAgICAgICAgIGlmICghbWFza2VkLmNvbXBpbGVkTWFza3MubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gbWFza2VkLnJhd0lucHV0VmFsdWU7IC8vIHNpbXVsYXRlIGlucHV0XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5wdXRzID0gbWFza2VkLmNvbXBpbGVkTWFza3MubWFwKGZ1bmN0aW9uIChtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgbS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgbS5hcHBlbmQoaW5wdXRWYWx1ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtLmFwcGVuZChhcHBlbmRlZCwgZmxhZ3MpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IG0ucmF3SW5wdXRWYWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7IC8vIHBvcCBtYXNrcyB3aXRoIGxvbmdlciB2YWx1ZXMgZmlyc3RcclxuXHJcbiAgICAgICAgICAgIGlucHV0cy5zb3J0KGZ1bmN0aW9uIChpMSwgaTIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpMi53ZWlnaHQgLSBpMS53ZWlnaHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gbWFza2VkLmNvbXBpbGVkTWFza3NbaW5wdXRzWzBdLmluZGV4XTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSU1hc2suTWFza2VkRHluYW1pYyA9IE1hc2tlZER5bmFtaWM7XHJcblxyXG4gICAgLyoqIE1hc2sgcGlwZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIHR5cGVzICovXHJcblxyXG4gICAgdmFyIFBJUEVfVFlQRSA9IHtcclxuICAgICAgICBNQVNLRUQ6ICd2YWx1ZScsXHJcbiAgICAgICAgVU5NQVNLRUQ6ICd1bm1hc2tlZFZhbHVlJyxcclxuICAgICAgICBUWVBFRDogJ3R5cGVkVmFsdWUnXHJcbiAgICB9O1xyXG4gICAgLyoqIENyZWF0ZXMgbmV3IHBpcGUgZnVuY3Rpb24gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlUGlwZShtYXNrKSB7XHJcbiAgICAgICAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFBJUEVfVFlQRS5NQVNLRUQ7XHJcbiAgICAgICAgdmFyIHRvID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQSVBFX1RZUEUuTUFTS0VEO1xyXG4gICAgICAgIHZhciBtYXNrZWQgPSBjcmVhdGVNYXNrKG1hc2spO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tlZC5ydW5Jc29sYXRlZChmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgbVtmcm9tXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1bdG9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqIFBpcGVzIHZhbHVlIHRocm91Z2ggbWFzayBkZXBlbmRpbmcgb24gbWFzayB0eXBlLCBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIG9wdGlvbnMgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBwaXBlKHZhbHVlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBpcGVBcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICAgICAgcGlwZUFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBpcGUuYXBwbHkodm9pZCAwLCBwaXBlQXJncykodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgSU1hc2suUElQRV9UWVBFID0gUElQRV9UWVBFO1xyXG4gICAgSU1hc2suY3JlYXRlUGlwZSA9IGNyZWF0ZVBpcGU7XHJcbiAgICBJTWFzay5waXBlID0gcGlwZTtcclxuXHJcbiAgICBnbG9iYWxUaGlzLklNYXNrID0gSU1hc2s7XHJcblxyXG4gICAgZXhwb3J0cy5IVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgPSBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XHJcbiAgICBleHBvcnRzLkhUTUxNYXNrRWxlbWVudCA9IEhUTUxNYXNrRWxlbWVudDtcclxuICAgIGV4cG9ydHMuSW5wdXRNYXNrID0gSW5wdXRNYXNrO1xyXG4gICAgZXhwb3J0cy5NYXNrRWxlbWVudCA9IE1hc2tFbGVtZW50O1xyXG4gICAgZXhwb3J0cy5NYXNrZWQgPSBNYXNrZWQ7XHJcbiAgICBleHBvcnRzLk1hc2tlZERhdGUgPSBNYXNrZWREYXRlO1xyXG4gICAgZXhwb3J0cy5NYXNrZWREeW5hbWljID0gTWFza2VkRHluYW1pYztcclxuICAgIGV4cG9ydHMuTWFza2VkRW51bSA9IE1hc2tlZEVudW07XHJcbiAgICBleHBvcnRzLk1hc2tlZEZ1bmN0aW9uID0gTWFza2VkRnVuY3Rpb247XHJcbiAgICBleHBvcnRzLk1hc2tlZE51bWJlciA9IE1hc2tlZE51bWJlcjtcclxuICAgIGV4cG9ydHMuTWFza2VkUGF0dGVybiA9IE1hc2tlZFBhdHRlcm47XHJcbiAgICBleHBvcnRzLk1hc2tlZFJhbmdlID0gTWFza2VkUmFuZ2U7XHJcbiAgICBleHBvcnRzLk1hc2tlZFJlZ0V4cCA9IE1hc2tlZFJlZ0V4cDtcclxuICAgIGV4cG9ydHMuUElQRV9UWVBFID0gUElQRV9UWVBFO1xyXG4gICAgZXhwb3J0cy5jcmVhdGVNYXNrID0gY3JlYXRlTWFzaztcclxuICAgIGV4cG9ydHMuY3JlYXRlUGlwZSA9IGNyZWF0ZVBpcGU7XHJcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBJTWFzaztcclxuICAgIGV4cG9ydHMucGlwZSA9IHBpcGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHJcbn0pKSk7Il19
